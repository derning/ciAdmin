<?php  class TP_yyToken implements ArrayAccess { public $string = ''; public $metadata = array(); function __construct($s, $m = array()) { if ($s instanceof TP_yyToken) { $this->string = $s->string; $this->metadata = $s->metadata; } else { $this->string = (string) $s; if ($m instanceof TP_yyToken) { $this->metadata = $m->metadata; } elseif (is_array($m)) { $this->metadata = $m; } } } function __toString() { return $this->_string; } function offsetExists($offset) { return isset($this->metadata[$offset]); } function offsetGet($offset) { return $this->metadata[$offset]; } function offsetSet($offset, $value) { if ($offset === null) { if (isset($value[0])) { $x = ($value instanceof TP_yyToken) ? $value->metadata : $value; $this->metadata = array_merge($this->metadata, $x); return; } $offset = count($this->metadata); } if ($value === null) { return; } if ($value instanceof TP_yyToken) { if ($value->metadata) { $this->metadata[$offset] = $value->metadata; } } elseif ($value) { $this->metadata[$offset] = $value; } } function offsetUnset($offset) { unset($this->metadata[$offset]); } } class TP_yyStackEntry { public $stateno;  public $major;  public $minor;  }; class Smarty_Internal_Templateparser{  const Err1 = "Security error: Call to private object member not allowed"; const Err2 = "Security error: Call to dynamic object member not allowed"; const Err3 = "PHP in template not allowed. Use SmartyBC to enable it";  public $successful = true; public $retvalue = 0; private $lex; private $internalError = false; private $strip = false; function __construct($lex, $compiler) { $this->lex = $lex; $this->compiler = $compiler; $this->smarty = $this->compiler->smarty; $this->template = $this->compiler->template; $this->compiler->has_variable_string = false; $this->compiler->prefix_code = array(); $this->prefix_number = 0; $this->block_nesting_level = 0; if ($this->security = isset($this->smarty->security_policy)) { $this->php_handling = $this->smarty->security_policy->php_handling; } else { $this->php_handling = $this->smarty->php_handling; } $this->is_xml = false; $this->asp_tags = (ini_get('asp_tags') != '0'); $this->current_buffer = $this->root_buffer = new _smarty_template_buffer($this); } public static function escape_start_tag($tag_text) { $tag = preg_replace('/\A<\?(.*)\z/', '<<?php ?>?\1', $tag_text, -1 , $count);  return $tag; } public static function escape_end_tag($tag_text) { return '?<?php ?>>'; } public function compileVariable($variable) { if (strpos($variable,'(') == 0) {  $var = trim($variable,'\''); $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable($var, null, true, false)->nocache; $this->template->properties['variables'][$var] = $this->compiler->tag_nocache|$this->compiler->nocache; }  return '$_smarty_tpl->tpl_vars['. $variable .']->value'; }  const TP_VERT = 1; const TP_COLON = 2; const TP_COMMENT = 3; const TP_PHPSTARTTAG = 4; const TP_PHPENDTAG = 5; const TP_ASPSTARTTAG = 6; const TP_ASPENDTAG = 7; const TP_FAKEPHPSTARTTAG = 8; const TP_XMLTAG = 9; const TP_TEXT = 10; const TP_STRIPON = 11; const TP_STRIPOFF = 12; const TP_LITERALSTART = 13; const TP_LITERALEND = 14; const TP_LITERAL = 15; const TP_LDEL = 16; const TP_RDEL = 17; const TP_DOLLAR = 18; const TP_ID = 19; const TP_EQUAL = 20; const TP_PTR = 21; const TP_LDELIF = 22; const TP_LDELFOR = 23; const TP_SEMICOLON = 24; const TP_INCDEC = 25; const TP_TO = 26; const TP_STEP = 27; const TP_LDELFOREACH = 28; const TP_SPACE = 29; const TP_AS = 30; const TP_APTR = 31; const TP_LDELSETFILTER = 32; const TP_SMARTYBLOCKCHILD = 33; const TP_LDELSLASH = 34; const TP_INTEGER = 35; const TP_COMMA = 36; const TP_OPENP = 37; const TP_CLOSEP = 38; const TP_MATH = 39; const TP_UNIMATH = 40; const TP_ANDSYM = 41; const TP_ISIN = 42; const TP_ISDIVBY = 43; const TP_ISNOTDIVBY = 44; const TP_ISEVEN = 45; const TP_ISNOTEVEN = 46; const TP_ISEVENBY = 47; const TP_ISNOTEVENBY = 48; const TP_ISODD = 49; const TP_ISNOTODD = 50; const TP_ISODDBY = 51; const TP_ISNOTODDBY = 52; const TP_INSTANCEOF = 53; const TP_QMARK = 54; const TP_NOT = 55; const TP_TYPECAST = 56; const TP_HEX = 57; const TP_DOT = 58; const TP_SINGLEQUOTESTRING = 59; const TP_DOUBLECOLON = 60; const TP_AT = 61; const TP_HATCH = 62; const TP_OPENB = 63; const TP_CLOSEB = 64; const TP_EQUALS = 65; const TP_NOTEQUALS = 66; const TP_GREATERTHAN = 67; const TP_LESSTHAN = 68; const TP_GREATEREQUAL = 69; const TP_LESSEQUAL = 70; const TP_IDENTITY = 71; const TP_NONEIDENTITY = 72; const TP_MOD = 73; const TP_LAND = 74; const TP_LOR = 75; const TP_LXOR = 76; const TP_QUOTE = 77; const TP_BACKTICK = 78; const TP_DOLLARID = 79; const YY_NO_ACTION = 592; const YY_ACCEPT_ACTION = 591; const YY_ERROR_ACTION = 590; const YY_SZ_ACTTAB = 2562; static public $yy_action = array(  218, 317, 318, 320, 319, 316, 315, 311, 310, 312,  313, 314, 321, 322, 197, 193, 187, 43, 591, 95,  255, 318, 320, 6, 107, 292, 38, 11, 42, 154,  283, 13, 181, 245, 295, 241, 262, 284, 51, 50,  52, 44, 23, 28, 367, 374, 33, 32, 375, 383,  21, 31, 328, 323, 325, 326, 324, 9, 36, 353,  265, 197, 331, 329, 384, 385, 386, 382, 381, 377,  376, 378, 379, 282, 380, 362, 218, 344, 4, 106,  175, 120, 7, 11, 82, 129, 283, 12, 456, 292,  453, 27, 291, 301, 361, 109, 387, 236, 368, 365,  456, 343, 453, 243, 42, 136, 200, 37, 7, 267,  7, 219, 256, 7, 51, 50, 52, 44, 23, 28,  367, 374, 33, 32, 375, 383, 21, 31, 239, 99,  171, 136, 36, 136, 261, 26, 136, 123, 373, 292,  384, 385, 386, 382, 381, 377, 376, 378, 379, 282,  380, 362, 218, 344, 369, 218, 200, 132, 158, 184,  68, 119, 235, 11, 11, 153, 283, 283, 337, 301,  361, 458, 306, 236, 368, 365, 42, 343, 252, 284,  42, 191, 218, 458, 250, 11, 200, 287, 283, 12,  51, 50, 52, 44, 23, 28, 367, 374, 33, 32,  375, 383, 21, 31, 302, 108, 168, 49, 200, 232,  11, 218, 35, 283, 240, 292, 384, 385, 386, 382,  381, 377, 376, 378, 379, 282, 380, 362, 218, 344,  207, 218, 200, 132, 49, 8, 54, 119, 142, 11,  14, 158, 283, 110, 342, 301, 361, 455, 152, 236,  368, 365, 42, 343, 231, 239, 42, 350, 103, 455,  248, 199, 339, 49, 343, 345, 51, 50, 52, 44,  23, 28, 367, 374, 33, 32, 375, 383, 21, 31,  128, 183, 174, 49, 370, 163, 198, 339, 15, 158,  292, 292, 384, 385, 386, 382, 381, 377, 376, 378,  379, 282, 380, 362, 218, 344, 192, 218, 201, 120,  344, 272, 82, 129, 156, 164, 270, 218, 129, 158,  273, 301, 361, 458, 292, 236, 368, 365, 128, 343,  236, 368, 365, 296, 343, 458, 284, 244, 130, 227,  260, 330, 51, 50, 52, 44, 23, 28, 367, 374,  33, 32, 375, 383, 21, 31, 207, 196, 339, 49,  41, 8, 127, 162, 251, 229, 212, 242, 384, 385,  386, 382, 381, 377, 376, 378, 379, 282, 380, 362,  218, 344, 101, 218, 176, 132, 344, 140, 78, 129,  148, 166, 249, 292, 129, 186, 278, 301, 361, 327,  292, 236, 368, 365, 292, 343, 236, 368, 365, 5,  343, 42, 211, 36, 121, 281, 284, 201, 51, 50,  52, 44, 23, 28, 367, 374, 33, 32, 375, 383,  21, 31, 218, 178, 7, 49, 179, 275, 225, 185,  11, 284, 292, 283, 384, 385, 386, 382, 381, 377,  376, 378, 379, 282, 380, 362, 17, 136, 11, 201,  170, 226, 173, 200, 284, 141, 247, 223, 335, 292,  51, 50, 52, 44, 23, 28, 367, 374, 33, 32,  375, 383, 21, 31, 135, 218, 201, 359, 11, 11,  11, 238, 213, 234, 188, 302, 384, 385, 386, 382,  381, 377, 376, 378, 379, 282, 380, 362, 195, 351,  189, 366, 251, 235, 218, 251, 264, 333, 146, 332,  305, 200, 143, 51, 50, 52, 44, 23, 28, 367,  374, 33, 32, 375, 383, 21, 31, 218, 203, 137,  15, 297, 42, 271, 194, 19, 98, 116, 102, 384,  385, 386, 382, 381, 377, 376, 378, 379, 282, 380,  362, 372, 372, 372, 300, 34, 224, 138, 39, 139,  225, 146, 131, 133, 159, 51, 50, 52, 44, 23,  28, 367, 374, 33, 32, 375, 383, 21, 31, 372,  172, 334, 94, 299, 276, 302, 2, 371, 4, 292,  125, 384, 385, 386, 382, 381, 377, 376, 378, 379,  282, 380, 362, 218, 344, 372, 218, 308, 132, 344,  287, 78, 129, 150, 370, 201, 161, 129, 160, 204,  301, 361, 341, 29, 236, 368, 365, 292, 343, 236,  368, 365, 218, 343, 284, 216, 42, 20, 277, 284,  263, 51, 50, 52, 44, 23, 28, 367, 374, 33,  32, 375, 383, 21, 31, 218, 228, 45, 49, 16,  326, 249, 104, 326, 326, 118, 105, 384, 385, 386,  382, 381, 377, 376, 378, 379, 282, 380, 362, 340,  372, 372, 326, 326, 326, 326, 326, 326, 326, 326,  326, 42, 237, 51, 50, 52, 44, 23, 28, 367,  374, 33, 32, 375, 383, 21, 31, 218, 326, 326,  326, 326, 326, 326, 326, 326, 114, 326, 218, 384,  385, 386, 382, 381, 377, 376, 378, 379, 282, 380,  362, 372, 353, 326, 307, 326, 326, 326, 326, 326,  326, 326, 326, 326, 268, 51, 50, 52, 44, 23,  28, 367, 374, 33, 32, 375, 383, 21, 31, 218,  326, 326, 326, 326, 326, 326, 326, 326, 97, 355,  112, 384, 385, 386, 382, 381, 377, 376, 378, 379,  282, 380, 362, 372, 326, 372, 326, 42, 326, 326,  326, 326, 326, 326, 326, 326, 158, 51, 50, 52,  44, 23, 28, 367, 374, 33, 32, 375, 383, 21,  31, 218, 326, 326, 326, 326, 326, 326, 326, 326,  326, 326, 326, 384, 385, 386, 382, 381, 377, 376,  378, 379, 282, 380, 362, 128, 326, 326, 326, 326,  326, 326, 326, 326, 326, 326, 326, 326, 326, 51,  50, 52, 44, 23, 28, 367, 374, 33, 32, 375,  383, 21, 31, 326, 326, 326, 326, 326, 326, 326,  326, 326, 326, 326, 266, 384, 385, 386, 382, 381,  377, 376, 378, 379, 282, 380, 362, 218, 326, 326,  326, 326, 190, 344, 326, 326, 11, 145, 354, 283,  288, 129, 218, 202, 18, 24, 22, 218, 45, 42,  6, 107, 42, 236, 368, 365, 154, 343, 286, 200,  245, 295, 241, 285, 326, 51, 50, 52, 44, 23,  28, 367, 374, 33, 32, 375, 383, 21, 31, 218,  10, 326, 326, 326, 326, 326, 326, 326, 326, 326,  326, 384, 385, 386, 382, 381, 377, 376, 378, 379,  282, 380, 362, 326, 326, 356, 40, 352, 326, 326,  326, 326, 326, 326, 326, 326, 326, 51, 50, 52,  44, 23, 28, 367, 374, 33, 32, 375, 383, 21,  31, 218, 326, 326, 326, 326, 326, 326, 326, 326,  326, 326, 326, 384, 385, 386, 382, 381, 377, 376,  378, 379, 282, 380, 362, 326, 326, 326, 326, 326,  326, 326, 326, 326, 326, 326, 326, 326, 326, 51,  50, 52, 44, 23, 28, 367, 374, 33, 32, 375,  383, 21, 31, 326, 326, 326, 326, 326, 326, 326,  326, 326, 326, 326, 326, 384, 385, 386, 382, 381,  377, 376, 378, 379, 282, 380, 362, 218, 218, 51,  50, 52, 44, 23, 28, 367, 374, 33, 32, 375,  383, 21, 31, 303, 304, 326, 326, 326, 326, 326,  326, 326, 326, 326, 326, 384, 385, 386, 382, 381,  377, 376, 378, 379, 282, 380, 362, 218, 326, 218,  326, 326, 43, 326, 134, 208, 326, 326, 6, 107,  326, 326, 253, 348, 154, 452, 354, 230, 245, 295,  241, 246, 18, 30, 42, 42, 48, 42, 6, 107,  326, 326, 326, 7, 154, 326, 326, 326, 245, 295,  241, 47, 46, 298, 233, 363, 326, 344, 101, 1,  269, 155, 326, 326, 326, 129, 136, 326, 43, 326,  134, 220, 326, 96, 6, 107, 358, 236, 368, 365,  154, 343, 326, 326, 245, 295, 241, 246, 42, 30,  326, 254, 48, 360, 40, 352, 326, 344, 326, 326,  326, 151, 326, 42, 349, 129, 326, 47, 46, 298,  233, 363, 326, 274, 101, 1, 42, 236, 368, 365,  326, 343, 336, 357, 43, 42, 144, 220, 326, 96,  6, 107, 289, 326, 42, 42, 154, 258, 326, 294,  245, 295, 241, 246, 42, 3, 326, 338, 48, 42,  259, 42, 326, 344, 326, 326, 326, 149, 326, 42,  279, 129, 42, 47, 46, 298, 233, 363, 326, 293,  101, 1, 42, 236, 368, 365, 326, 343, 309, 347,  43, 42, 126, 220, 326, 96, 6, 107, 290, 326,  42, 42, 154, 346, 326, 257, 245, 295, 241, 246,  42, 30, 326, 326, 48, 42, 326, 42, 326, 326,  326, 326, 326, 326, 326, 326, 326, 326, 326, 47,  46, 298, 233, 363, 326, 326, 101, 1, 326, 326,  326, 326, 326, 326, 326, 326, 43, 326, 130, 220,  326, 96, 6, 107, 326, 326, 326, 326, 154, 326,  326, 326, 245, 295, 241, 246, 326, 25, 326, 326,  48, 326, 326, 326, 326, 326, 326, 326, 326, 326,  326, 326, 326, 326, 326, 47, 46, 298, 233, 363,  326, 326, 101, 1, 326, 326, 326, 326, 326, 326,  326, 326, 43, 326, 134, 210, 326, 96, 6, 107,  326, 326, 326, 326, 154, 326, 326, 326, 245, 295,  241, 246, 326, 30, 326, 326, 48, 326, 326, 326,  326, 326, 326, 326, 326, 326, 326, 326, 326, 326,  326, 47, 46, 298, 233, 363, 326, 326, 101, 1,  326, 326, 326, 326, 326, 326, 326, 326, 43, 326,  124, 92, 326, 96, 6, 107, 326, 326, 326, 326,  154, 326, 326, 326, 245, 295, 241, 246, 326, 30,  326, 326, 48, 326, 326, 326, 326, 326, 326, 326,  326, 326, 326, 326, 326, 326, 326, 47, 46, 298,  233, 363, 326, 326, 101, 1, 326, 326, 326, 326,  326, 326, 326, 326, 43, 326, 134, 206, 326, 96,  6, 107, 326, 326, 326, 326, 154, 326, 326, 326,  245, 295, 241, 222, 326, 30, 326, 326, 48, 326,  326, 326, 326, 326, 326, 326, 326, 326, 326, 326,  326, 326, 326, 47, 46, 298, 233, 363, 326, 326,  101, 1, 326, 326, 326, 326, 326, 326, 326, 326,  43, 326, 134, 205, 326, 96, 6, 107, 326, 326,  326, 326, 154, 326, 326, 326, 245, 295, 241, 246,  326, 30, 326, 326, 48, 326, 326, 326, 326, 326,  326, 326, 326, 326, 326, 326, 326, 326, 326, 47,  46, 298, 233, 363, 326, 326, 101, 1, 326, 326,  326, 326, 326, 326, 326, 326, 43, 326, 134, 209,  326, 96, 6, 107, 326, 326, 326, 326, 154, 326,  326, 326, 245, 295, 241, 246, 326, 30, 326, 326,  48, 326, 326, 326, 326, 326, 326, 326, 326, 326,  326, 326, 326, 326, 326, 47, 46, 298, 233, 363,  326, 326, 101, 1, 326, 326, 326, 326, 326, 326,  326, 326, 43, 326, 130, 220, 326, 96, 6, 107,  326, 326, 326, 326, 154, 326, 326, 326, 245, 295,  241, 246, 326, 25, 326, 326, 48, 326, 326, 326,  326, 326, 326, 326, 326, 326, 326, 326, 326, 190,  165, 47, 46, 298, 233, 363, 326, 326, 101, 292,  326, 326, 24, 22, 326, 326, 326, 326, 43, 326,  130, 221, 326, 96, 6, 107, 200, 326, 326, 326,  154, 326, 326, 326, 245, 295, 241, 246, 326, 25,  326, 326, 48, 326, 326, 326, 326, 326, 326, 326,  326, 326, 326, 326, 326, 326, 326, 47, 46, 298,  233, 363, 326, 326, 101, 326, 326, 326, 326, 326,  326, 326, 326, 326, 326, 501, 190, 180, 326, 96,  326, 326, 501, 326, 501, 501, 292, 501, 501, 24,  22, 326, 326, 344, 501, 7, 501, 132, 326, 326,  78, 129, 326, 200, 326, 326, 326, 326, 326, 301,  361, 501, 326, 236, 368, 365, 326, 343, 136, 326,  326, 344, 501, 326, 217, 93, 326, 326, 59, 117,  326, 326, 326, 326, 326, 326, 501, 301, 361, 326,  326, 236, 368, 365, 344, 343, 326, 326, 132, 326,  326, 77, 129, 326, 326, 326, 326, 326, 326, 326,  301, 361, 326, 326, 236, 368, 365, 344, 343, 326,  326, 132, 326, 326, 84, 129, 326, 326, 344, 326,  326, 326, 115, 301, 361, 72, 129, 236, 368, 365,  326, 343, 326, 326, 301, 361, 326, 326, 236, 368,  365, 326, 343, 344, 326, 326, 326, 132, 326, 326,  64, 129, 326, 326, 344, 326, 326, 326, 132, 301,  361, 66, 129, 236, 368, 365, 326, 343, 326, 326,  301, 361, 326, 344, 236, 368, 365, 132, 343, 326,  68, 129, 326, 326, 326, 326, 326, 326, 326, 301,  361, 326, 344, 236, 368, 365, 132, 343, 326, 76,  129, 326, 326, 344, 326, 326, 326, 132, 301, 361,  80, 129, 236, 368, 365, 326, 343, 326, 326, 301,  361, 326, 326, 236, 368, 365, 326, 343, 344, 326,  326, 326, 132, 326, 326, 60, 129, 326, 326, 344,  326, 326, 326, 132, 301, 361, 73, 129, 236, 368,  365, 326, 343, 326, 326, 301, 361, 326, 344, 236,  368, 365, 132, 343, 326, 74, 129, 326, 326, 326,  326, 326, 326, 326, 301, 361, 326, 344, 236, 368,  365, 132, 343, 326, 90, 129, 326, 326, 344, 326,  326, 326, 132, 301, 361, 65, 129, 236, 368, 365,  326, 343, 326, 326, 301, 361, 326, 326, 236, 368,  365, 326, 343, 344, 326, 326, 326, 132, 326, 326,  83, 129, 326, 326, 344, 326, 326, 326, 93, 301,  361, 53, 117, 236, 368, 365, 326, 343, 326, 326,  301, 361, 326, 344, 215, 368, 365, 132, 343, 326,  87, 129, 326, 326, 326, 326, 326, 326, 326, 301,  361, 326, 344, 236, 368, 365, 132, 343, 326, 58,  129, 326, 326, 344, 326, 326, 326, 122, 301, 361,  55, 129, 236, 368, 365, 326, 343, 326, 326, 301,  361, 326, 326, 236, 368, 365, 326, 343, 344, 326,  326, 326, 132, 326, 326, 70, 129, 326, 326, 344,  326, 326, 326, 132, 301, 361, 91, 129, 236, 368,  365, 326, 343, 326, 326, 301, 361, 326, 344, 236,  368, 365, 111, 343, 326, 63, 129, 326, 326, 326,  326, 326, 326, 326, 301, 361, 326, 344, 236, 368,  365, 132, 343, 326, 86, 129, 326, 326, 344, 326,  326, 326, 132, 301, 361, 79, 129, 236, 368, 365,  326, 343, 326, 326, 301, 361, 326, 326, 236, 368,  365, 326, 343, 344, 326, 326, 326, 132, 326, 326,  75, 129, 326, 326, 344, 326, 326, 326, 132, 301,  361, 88, 129, 236, 368, 365, 326, 343, 326, 326,  301, 361, 326, 344, 236, 368, 365, 132, 343, 326,  62, 129, 326, 326, 326, 326, 326, 326, 326, 301,  361, 326, 344, 236, 368, 365, 132, 343, 326, 61,  129, 326, 326, 344, 326, 326, 326, 132, 301, 361,  69, 129, 236, 368, 365, 326, 343, 326, 326, 301,  361, 326, 326, 236, 368, 365, 326, 343, 344, 326,  326, 326, 132, 326, 326, 57, 129, 326, 326, 344,  326, 326, 326, 132, 301, 361, 89, 129, 236, 368,  365, 326, 343, 326, 326, 301, 361, 326, 344, 236,  368, 365, 132, 343, 326, 81, 129, 326, 326, 326,  326, 326, 326, 326, 301, 361, 326, 344, 236, 368,  365, 113, 343, 326, 85, 129, 326, 326, 344, 326,  326, 326, 132, 301, 361, 71, 129, 236, 368, 365,  326, 343, 326, 326, 301, 361, 326, 326, 236, 368,  365, 326, 343, 344, 326, 326, 326, 132, 326, 326,  67, 129, 326, 326, 344, 326, 326, 326, 132, 301,  361, 56, 129, 214, 368, 365, 326, 343, 326, 326,  301, 361, 326, 344, 236, 368, 365, 147, 343, 326,  326, 129, 326, 326, 326, 326, 326, 326, 326, 326,  364, 326, 344, 236, 368, 365, 157, 343, 326, 326,  129, 326, 326, 326, 326, 100, 177, 326, 326, 280,  326, 326, 236, 368, 365, 292, 343, 326, 24, 22,  326, 190, 167, 326, 326, 326, 326, 326, 190, 182,  326, 292, 200, 326, 24, 22, 326, 326, 292, 326,  326, 24, 22, 326, 190, 169, 326, 326, 200, 326,  326, 326, 326, 326, 292, 200, 326, 24, 22, 326,  326, 326, 326, 326, 326, 326, 326, 326, 326, 326,  326, 200, ); static public $yy_lookahead = array(  1, 83, 84, 85, 3, 4, 5, 6, 7, 8,  9, 10, 11, 12, 13, 98, 90, 16, 81, 82,  83, 84, 85, 22, 23, 99, 27, 16, 29, 28,  19, 20, 109, 32, 33, 34, 25, 111, 39, 40,  41, 42, 43, 44, 45, 46, 47, 48, 49, 50,  51, 52, 4, 5, 6, 7, 8, 16, 36, 84,  38, 13, 14, 15, 65, 66, 67, 68, 69, 70,  71, 72, 73, 74, 75, 76, 1, 84, 37, 89,  90, 88, 37, 16, 91, 92, 19, 20, 17, 99,  17, 20, 17, 100, 101, 120, 121, 104, 105, 106,  29, 108, 29, 58, 29, 60, 116, 31, 37, 64,  37, 118, 119, 37, 39, 40, 41, 42, 43, 44,  45, 46, 47, 48, 49, 50, 51, 52, 61, 89,  90, 60, 36, 60, 38, 16, 60, 18, 19, 99,  65, 66, 67, 68, 69, 70, 71, 72, 73, 74,  75, 76, 1, 84, 35, 1, 116, 88, 21, 89,  91, 92, 93, 16, 16, 97, 19, 19, 17, 100,  101, 17, 19, 104, 105, 106, 29, 108, 31, 111,  29, 89, 1, 29, 30, 16, 116, 117, 19, 20,  39, 40, 41, 42, 43, 44, 45, 46, 47, 48,  49, 50, 51, 52, 25, 89, 90, 53, 116, 61,  16, 1, 31, 19, 61, 99, 65, 66, 67, 68,  69, 70, 71, 72, 73, 74, 75, 76, 1, 84,  58, 1, 116, 88, 53, 63, 91, 92, 93, 16,  20, 21, 19, 86, 17, 100, 101, 17, 92, 104,  105, 106, 29, 108, 31, 61, 29, 78, 98, 29,  104, 112, 113, 53, 108, 113, 39, 40, 41, 42,  43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  60, 90, 90, 53, 110, 109, 112, 113, 20, 21,  99, 99, 65, 66, 67, 68, 69, 70, 71, 72,  73, 74, 75, 76, 1, 84, 98, 1, 116, 88,  84, 62, 91, 92, 88, 90, 64, 1, 92, 21,  17, 100, 101, 17, 99, 104, 105, 106, 60, 108,  104, 105, 106, 17, 108, 29, 111, 21, 18, 19,  119, 14, 39, 40, 41, 42, 43, 44, 45, 46,  47, 48, 49, 50, 51, 52, 58, 112, 113, 53,  16, 63, 18, 19, 92, 93, 94, 19, 65, 66,  67, 68, 69, 70, 71, 72, 73, 74, 75, 76,  1, 84, 62, 1, 90, 88, 84, 19, 91, 92,  88, 90, 58, 99, 92, 90, 17, 100, 101, 17,  99, 104, 105, 106, 99, 108, 104, 105, 106, 36,  108, 29, 115, 36, 19, 38, 111, 116, 39, 40,  41, 42, 43, 44, 45, 46, 47, 48, 49, 50,  51, 52, 1, 90, 37, 53, 89, 64, 2, 109,  16, 111, 99, 19, 65, 66, 67, 68, 69, 70,  71, 72, 73, 74, 75, 76, 20, 60, 16, 116,  90, 19, 109, 116, 111, 18, 18, 19, 19, 99,  39, 40, 41, 42, 43, 44, 45, 46, 47, 48,  49, 50, 51, 52, 37, 1, 116, 17, 16, 16,  16, 19, 19, 19, 89, 25, 65, 66, 67, 68,  69, 70, 71, 72, 73, 74, 75, 76, 24, 78,  24, 107, 92, 93, 1, 92, 93, 85, 114, 87,  19, 116, 36, 39, 40, 41, 42, 43, 44, 45,  46, 47, 48, 49, 50, 51, 52, 1, 19, 18,  20, 35, 29, 62, 19, 2, 96, 96, 96, 65,  66, 67, 68, 69, 70, 71, 72, 73, 74, 75,  76, 111, 111, 111, 107, 54, 30, 18, 26, 18,  2, 114, 18, 18, 96, 39, 40, 41, 42, 43,  44, 45, 46, 47, 48, 49, 50, 51, 52, 111,  90, 19, 19, 35, 38, 25, 37, 19, 37, 99,  96, 65, 66, 67, 68, 69, 70, 71, 72, 73,  74, 75, 76, 1, 84, 111, 1, 99, 88, 84,  117, 91, 92, 88, 110, 116, 109, 92, 90, 17,  100, 101, 17, 20, 104, 105, 106, 99, 108, 104,  105, 106, 1, 108, 111, 115, 29, 29, 114, 111,  29, 39, 40, 41, 42, 43, 44, 45, 46, 47,  48, 49, 50, 51, 52, 1, 95, 2, 53, 95,  122, 58, 109, 122, 122, 96, 96, 65, 66, 67,  68, 69, 70, 71, 72, 73, 74, 75, 76, 17,  111, 111, 122, 122, 122, 122, 122, 122, 122, 122,  122, 29, 38, 39, 40, 41, 42, 43, 44, 45,  46, 47, 48, 49, 50, 51, 52, 1, 122, 122,  122, 122, 122, 122, 122, 122, 96, 122, 1, 65,  66, 67, 68, 69, 70, 71, 72, 73, 74, 75,  76, 111, 84, 122, 17, 122, 122, 122, 122, 122,  122, 122, 122, 122, 38, 39, 40, 41, 42, 43,  44, 45, 46, 47, 48, 49, 50, 51, 52, 1,  122, 122, 122, 122, 122, 122, 122, 122, 96, 121,  96, 65, 66, 67, 68, 69, 70, 71, 72, 73,  74, 75, 76, 111, 122, 111, 122, 29, 122, 122,  122, 122, 122, 122, 122, 122, 21, 39, 40, 41,  42, 43, 44, 45, 46, 47, 48, 49, 50, 51,  52, 1, 122, 122, 122, 122, 122, 122, 122, 122,  122, 122, 122, 65, 66, 67, 68, 69, 70, 71,  72, 73, 74, 75, 76, 60, 122, 122, 122, 122,  122, 122, 122, 122, 122, 122, 122, 122, 122, 39,  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,  50, 51, 52, 122, 122, 122, 122, 122, 122, 122,  122, 122, 122, 122, 64, 65, 66, 67, 68, 69,  70, 71, 72, 73, 74, 75, 76, 1, 122, 122,  122, 122, 89, 84, 122, 122, 16, 88, 10, 19,  17, 92, 1, 17, 16, 102, 103, 1, 2, 29,  22, 23, 29, 104, 105, 106, 28, 108, 17, 116,  32, 33, 34, 17, 122, 39, 40, 41, 42, 43,  44, 45, 46, 47, 48, 49, 50, 51, 52, 1,  2, 122, 122, 122, 122, 122, 122, 122, 122, 122,  122, 65, 66, 67, 68, 69, 70, 71, 72, 73,  74, 75, 76, 122, 122, 77, 78, 79, 122, 122,  122, 122, 122, 122, 122, 122, 122, 39, 40, 41,  42, 43, 44, 45, 46, 47, 48, 49, 50, 51,  52, 1, 122, 122, 122, 122, 122, 122, 122, 122,  122, 122, 122, 65, 66, 67, 68, 69, 70, 71,  72, 73, 74, 75, 76, 122, 122, 122, 122, 122,  122, 122, 122, 122, 122, 122, 122, 122, 122, 39,  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,  50, 51, 52, 122, 122, 122, 122, 122, 122, 122,  122, 122, 122, 122, 122, 65, 66, 67, 68, 69,  70, 71, 72, 73, 74, 75, 76, 1, 1, 39,  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,  50, 51, 52, 17, 17, 122, 122, 122, 122, 122,  122, 122, 122, 122, 122, 65, 66, 67, 68, 69,  70, 71, 72, 73, 74, 75, 76, 1, 122, 1,  122, 122, 16, 122, 18, 19, 122, 122, 22, 23,  122, 122, 17, 17, 28, 17, 10, 21, 32, 33,  34, 35, 16, 37, 29, 29, 40, 29, 22, 23,  122, 122, 122, 37, 28, 122, 122, 122, 32, 33,  34, 55, 56, 57, 58, 59, 122, 84, 62, 63,  64, 88, 122, 122, 122, 92, 60, 122, 16, 122,  18, 19, 122, 77, 22, 23, 17, 104, 105, 106,  28, 108, 122, 122, 32, 33, 34, 35, 29, 37,  122, 17, 40, 77, 78, 79, 122, 84, 122, 122,  122, 88, 122, 29, 17, 92, 122, 55, 56, 57,  58, 59, 122, 17, 62, 63, 29, 104, 105, 106,  122, 108, 17, 17, 16, 29, 18, 19, 122, 77,  22, 23, 17, 122, 29, 29, 28, 17, 122, 17,  32, 33, 34, 35, 29, 37, 122, 17, 40, 29,  17, 29, 122, 84, 122, 122, 122, 88, 122, 29,  17, 92, 29, 55, 56, 57, 58, 59, 122, 17,  62, 63, 29, 104, 105, 106, 122, 108, 17, 17,  16, 29, 18, 19, 122, 77, 22, 23, 17, 122,  29, 29, 28, 17, 122, 17, 32, 33, 34, 35,  29, 37, 122, 122, 40, 29, 122, 29, 122, 122,  122, 122, 122, 122, 122, 122, 122, 122, 122, 55,  56, 57, 58, 59, 122, 122, 62, 63, 122, 122,  122, 122, 122, 122, 122, 122, 16, 122, 18, 19,  122, 77, 22, 23, 122, 122, 122, 122, 28, 122,  122, 122, 32, 33, 34, 35, 122, 37, 122, 122,  40, 122, 122, 122, 122, 122, 122, 122, 122, 122,  122, 122, 122, 122, 122, 55, 56, 57, 58, 59,  122, 122, 62, 63, 122, 122, 122, 122, 122, 122,  122, 122, 16, 122, 18, 19, 122, 77, 22, 23,  122, 122, 122, 122, 28, 122, 122, 122, 32, 33,  34, 35, 122, 37, 122, 122, 40, 122, 122, 122,  122, 122, 122, 122, 122, 122, 122, 122, 122, 122,  122, 55, 56, 57, 58, 59, 122, 122, 62, 63,  122, 122, 122, 122, 122, 122, 122, 122, 16, 122,  18, 19, 122, 77, 22, 23, 122, 122, 122, 122,  28, 122, 122, 122, 32, 33, 34, 35, 122, 37,  122, 122, 40, 122, 122, 122, 122, 122, 122, 122,  122, 122, 122, 122, 122, 122, 122, 55, 56, 57,  58, 59, 122, 122, 62, 63, 122, 122, 122, 122,  122, 122, 122, 122, 16, 122, 18, 19, 122, 77,  22, 23, 122, 122, 122, 122, 28, 122, 122, 122,  32, 33, 34, 35, 122, 37, 122, 122, 40, 122,  122, 122, 122, 122, 122, 122, 122, 122, 122, 122,  122, 122, 122, 55, 56, 57, 58, 59, 122, 122,  62, 63, 122, 122, 122, 122, 122, 122, 122, 122,  16, 122, 18, 19, 122, 77, 22, 23, 122, 122,  122, 122, 28, 122, 122, 122, 32, 33, 34, 35,  122, 37, 122, 122, 40, 122, 122, 122, 122, 122,  122, 122, 122, 122, 122, 122, 122, 122, 122, 55,  56, 57, 58, 59, 122, 122, 62, 63, 122, 122,  122, 122, 122, 122, 122, 122, 16, 122, 18, 19,  122, 77, 22, 23, 122, 122, 122, 122, 28, 122,  122, 122, 32, 33, 34, 35, 122, 37, 122, 122,  40, 122, 122, 122, 122, 122, 122, 122, 122, 122,  122, 122, 122, 122, 122, 55, 56, 57, 58, 59,  122, 122, 62, 63, 122, 122, 122, 122, 122, 122,  122, 122, 16, 122, 18, 19, 122, 77, 22, 23,  122, 122, 122, 122, 28, 122, 122, 122, 32, 33,  34, 35, 122, 37, 122, 122, 40, 122, 122, 122,  122, 122, 122, 122, 122, 122, 122, 122, 122, 89,  90, 55, 56, 57, 58, 59, 122, 122, 62, 99,  122, 122, 102, 103, 122, 122, 122, 122, 16, 122,  18, 19, 122, 77, 22, 23, 116, 122, 122, 122,  28, 122, 122, 122, 32, 33, 34, 35, 122, 37,  122, 122, 40, 122, 122, 122, 122, 122, 122, 122,  122, 122, 122, 122, 122, 122, 122, 55, 56, 57,  58, 59, 122, 122, 62, 122, 122, 122, 122, 122,  122, 122, 122, 122, 122, 17, 89, 90, 122, 77,  122, 122, 24, 122, 26, 27, 99, 29, 30, 102,  103, 122, 122, 84, 36, 37, 38, 88, 122, 122,  91, 92, 122, 116, 122, 122, 122, 122, 122, 100,  101, 53, 122, 104, 105, 106, 122, 108, 60, 122,  122, 84, 64, 122, 115, 88, 122, 122, 91, 92,  122, 122, 122, 122, 122, 122, 78, 100, 101, 122,  122, 104, 105, 106, 84, 108, 122, 122, 88, 122,  122, 91, 92, 122, 122, 122, 122, 122, 122, 122,  100, 101, 122, 122, 104, 105, 106, 84, 108, 122,  122, 88, 122, 122, 91, 92, 122, 122, 84, 122,  122, 122, 88, 100, 101, 91, 92, 104, 105, 106,  122, 108, 122, 122, 100, 101, 122, 122, 104, 105,  106, 122, 108, 84, 122, 122, 122, 88, 122, 122,  91, 92, 122, 122, 84, 122, 122, 122, 88, 100,  101, 91, 92, 104, 105, 106, 122, 108, 122, 122,  100, 101, 122, 84, 104, 105, 106, 88, 108, 122,  91, 92, 122, 122, 122, 122, 122, 122, 122, 100,  101, 122, 84, 104, 105, 106, 88, 108, 122, 91,  92, 122, 122, 84, 122, 122, 122, 88, 100, 101,  91, 92, 104, 105, 106, 122, 108, 122, 122, 100,  101, 122, 122, 104, 105, 106, 122, 108, 84, 122,  122, 122, 88, 122, 122, 91, 92, 122, 122, 84,  122, 122, 122, 88, 100, 101, 91, 92, 104, 105,  106, 122, 108, 122, 122, 100, 101, 122, 84, 104,  105, 106, 88, 108, 122, 91, 92, 122, 122, 122,  122, 122, 122, 122, 100, 101, 122, 84, 104, 105,  106, 88, 108, 122, 91, 92, 122, 122, 84, 122,  122, 122, 88, 100, 101, 91, 92, 104, 105, 106,  122, 108, 122, 122, 100, 101, 122, 122, 104, 105,  106, 122, 108, 84, 122, 122, 122, 88, 122, 122,  91, 92, 122, 122, 84, 122, 122, 122, 88, 100,  101, 91, 92, 104, 105, 106, 122, 108, 122, 122,  100, 101, 122, 84, 104, 105, 106, 88, 108, 122,  91, 92, 122, 122, 122, 122, 122, 122, 122, 100,  101, 122, 84, 104, 105, 106, 88, 108, 122, 91,  92, 122, 122, 84, 122, 122, 122, 88, 100, 101,  91, 92, 104, 105, 106, 122, 108, 122, 122, 100,  101, 122, 122, 104, 105, 106, 122, 108, 84, 122,  122, 122, 88, 122, 122, 91, 92, 122, 122, 84,  122, 122, 122, 88, 100, 101, 91, 92, 104, 105,  106, 122, 108, 122, 122, 100, 101, 122, 84, 104,  105, 106, 88, 108, 122, 91, 92, 122, 122, 122,  122, 122, 122, 122, 100, 101, 122, 84, 104, 105,  106, 88, 108, 122, 91, 92, 122, 122, 84, 122,  122, 122, 88, 100, 101, 91, 92, 104, 105, 106,  122, 108, 122, 122, 100, 101, 122, 122, 104, 105,  106, 122, 108, 84, 122, 122, 122, 88, 122, 122,  91, 92, 122, 122, 84, 122, 122, 122, 88, 100,  101, 91, 92, 104, 105, 106, 122, 108, 122, 122,  100, 101, 122, 84, 104, 105, 106, 88, 108, 122,  91, 92, 122, 122, 122, 122, 122, 122, 122, 100,  101, 122, 84, 104, 105, 106, 88, 108, 122, 91,  92, 122, 122, 84, 122, 122, 122, 88, 100, 101,  91, 92, 104, 105, 106, 122, 108, 122, 122, 100,  101, 122, 122, 104, 105, 106, 122, 108, 84, 122,  122, 122, 88, 122, 122, 91, 92, 122, 122, 84,  122, 122, 122, 88, 100, 101, 91, 92, 104, 105,  106, 122, 108, 122, 122, 100, 101, 122, 84, 104,  105, 106, 88, 108, 122, 91, 92, 122, 122, 122,  122, 122, 122, 122, 100, 101, 122, 84, 104, 105,  106, 88, 108, 122, 91, 92, 122, 122, 84, 122,  122, 122, 88, 100, 101, 91, 92, 104, 105, 106,  122, 108, 122, 122, 100, 101, 122, 122, 104, 105,  106, 122, 108, 84, 122, 122, 122, 88, 122, 122,  91, 92, 122, 122, 84, 122, 122, 122, 88, 100,  101, 91, 92, 104, 105, 106, 122, 108, 122, 122,  100, 101, 122, 84, 104, 105, 106, 88, 108, 122,  122, 92, 122, 122, 122, 122, 122, 122, 122, 122,  101, 122, 84, 104, 105, 106, 88, 108, 122, 122,  92, 122, 122, 122, 122, 89, 90, 122, 122, 101,  122, 122, 104, 105, 106, 99, 108, 122, 102, 103,  122, 89, 90, 122, 122, 122, 122, 122, 89, 90,  122, 99, 116, 122, 102, 103, 122, 122, 99, 122,  122, 102, 103, 122, 89, 90, 122, 122, 116, 122,  122, 122, 122, 122, 99, 116, 122, 102, 103, 122,  122, 122, 122, 122, 122, 122, 122, 122, 122, 122,  122, 116, ); const YY_SHIFT_USE_DFLT = -2; const YY_SHIFT_MAX = 252; static public $yy_shift_ofst = array(  1, 1386, 1162, 1218, 1162, 1386, 1218, 1162, 1106, 1162,  1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1442, 1554,  1498, 1162, 1162, 1162, 1162, 1162, 1162, 1610, 1162, 1162,  1162, 1162, 1162, 1162, 1274, 1162, 1162, 1162, 1162, 1162,  1162, 1162, 1498, 1442, 1330, 1330, 1666, 1666, 1666, 1722,  1666, 1666, 1666, 227, 75, 151, -1, 768, 768, 768,  948, 896, 820, 536, 379, 716, 303, 431, 664, 612,  484, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  1040, 1040, 1116, 382, 513, 1, 1126, 147, 223, 1118,  1118, 320, 890, 916, 298, 890, 513, 447, 513, 898,  48, 154, 11, 306, 67, 230, 194, 220, 169, 268,  181, 316, 615, 424, 473, 424, 472, 474, 448, 785,  424, 424, 210, 424, 442, 447, 448, 424, 424, 424,  727, 424, 1288, 447, 442, 641, 137, 641, 641, 641,  641, 641, 137, 617, 618, 641, 641, -2, 344, 148,  893, 172, 41, 172, 1225, 1215, 1216, 1206, 1197, 1115,  1169, 1184, 1230, 172, 1271, 672, 1262, 1272, 1286, 1077,  1281, 172, 1240, 1232, 911, 172, 1253, 1243, 1076, 621,  641, 641, 665, 665, 559, 621, 137, 327, 137, 137,  -2, -2, -2, -2, -2, 1778, 71, 119, 45, 73,  76, 96, 486, 436, 179, 470, 22, 377, 153, 373,  397, 397, 613, 561, 554, 572, 568, 249, 549, 542,  573, 555, 578, 558, 559, 556, 570, 511, 543, 449,  501, 395, 252, 348, 368, 519, 334, 525, 481, 506,  521, 520, 551, ); const YY_REDUCE_USE_DFLT = -84; const YY_REDUCE_MAX = 204; static public $yy_reduce_ofst = array(  -63, -7, 1729, 69, 297, 221, 145, 530, 2209, 2228,  1973, 1850, 2190, 2039, 2058, 1899, 2094, 2069, 2020, 2105,  2124, 2179, 2154, 2143, 2009, 1984, 1839, 1814, 1780, 1803,  1869, 1888, 1954, 1935, 1924, 2275, 2324, 2294, 2264, 2360,  2349, 2239, 2313, 1757, 2379, 2398, 226, 819, 302, 535,  1179, 1123, 1083, 2406, 1707, 1630, 2422, 2445, 2429, 2406,  813, 813, 813, 813, 813, 813, 813, 813, 813, 813,  813, 813, 813, 813, 813, 813, 813, 813, 813, 813,  813, 813, 813, 813, 813, 813, 813, 813, 813, 813,  813, 813, -10, 40, 116, -82, -25, 225, -74, 192,  343, 156, 305, 70, 174, 538, 370, 272, 301, 658,  432, 92, 68, 92, 330, 92, 330, 245, 330, 245,  92, 347, 92, 478, 451, 353, 451, 504, 404, 245,  451, 450, 92, 452, 451, 420, 457, 682, 684, 580,  405, 579, 500, 423, 630, 92, 149, 92, 92, 92,  92, 92, 245, 294, 191, 92, 92, 92, 534, 533,  518, 514, 517, 514, 518, 518, 518, 518, 518, 518,  518, 518, 518, 514, 518, 518, 518, 518, 518, 509,  518, 514, 518, 518, 509, 514, 518, 518, 509, 574,  509, 509, 503, 503, 563, 571, 152, 157, 152, 152,  -83, 208, 176, 160, -77, ); static public $yyExpectedTokens = array(  array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 22, 23, 28, 32, 33, 34, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 64, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 63, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 77, ),  array(16, 18, 19, 22, 23, 28, 32, 33, 34, 35, 37, 40, 55, 56, 57, 58, 59, 62, 77, ),  array(1, 17, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 17, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 17, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 27, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 2, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 17, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 17, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 17, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, ),  array(1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 17, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, ),  array(1, 17, 21, 29, 37, 60, ),  array(1, 17, 29, 53, ),  array(1, 29, ),  array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 22, 23, 28, 32, 33, 34, ),  array(10, 16, 22, 23, 28, 32, 33, 34, 77, 78, 79, ),  array(16, 19, 29, 31, ),  array(16, 19, 29, 31, ),  array(1, 17, 29, ),  array(1, 17, 29, ),  array(18, 19, 62, ),  array(16, 19, 29, ),  array(1, 2, 17, ),  array(21, 58, 63, ),  array(16, 19, 29, ),  array(1, 29, ),  array(18, 37, ),  array(1, 29, ),  array(10, 16, 22, 23, 28, 32, 33, 34, 77, 78, 79, ),  array(4, 5, 6, 7, 8, 13, 14, 15, ),  array(1, 17, 29, 30, 53, ),  array(16, 19, 20, 25, ),  array(1, 17, 29, 53, ),  array(16, 19, 20, 61, ),  array(1, 17, 29, 53, ),  array(16, 19, 61, ),  array(20, 21, 60, ),  array(16, 19, 20, ),  array(20, 21, 60, ),  array(1, 31, 53, ),  array(1, 17, 21, ),  array(1, 17, 53, ),  array(16, 19, ),  array(16, 19, ),  array(16, 19, ),  array(16, 19, ),  array(16, 19, ),  array(18, 19, ),  array(21, 60, ),  array(16, 19, ),  array(16, 19, ),  array(1, 53, ),  array(16, 19, ),  array(16, 19, ),  array(18, 37, ),  array(18, 19, ),  array(16, 19, ),  array(16, 19, ),  array(16, 19, ),  array(1, 17, ),  array(16, 19, ),  array(17, 29, ),  array(18, 37, ),  array(16, 19, ),  array(1, ),  array(21, ),  array(1, ),  array(1, ),  array(1, ),  array(1, ),  array(1, ),  array(21, ),  array(29, ),  array(29, ),  array(1, ),  array(1, ),  array(),  array(16, 18, 19, ),  array(16, 19, 61, ),  array(17, 29, ),  array(58, 63, ),  array(16, 37, ),  array(58, 63, ),  array(17, 29, ),  array(17, 29, ),  array(17, 29, ),  array(17, 29, ),  array(17, 29, ),  array(17, 29, ),  array(17, 29, ),  array(17, 29, ),  array(17, 29, ),  array(58, 63, ),  array(17, 29, ),  array(17, 29, ),  array(17, 29, ),  array(17, 29, ),  array(17, 29, ),  array(1, 17, ),  array(17, 29, ),  array(58, 63, ),  array(17, 29, ),  array(17, 29, ),  array(1, 17, ),  array(58, 63, ),  array(17, 29, ),  array(17, 29, ),  array(1, 17, ),  array(29, ),  array(1, ),  array(1, ),  array(2, ),  array(2, ),  array(37, ),  array(29, ),  array(21, ),  array(14, ),  array(21, ),  array(21, ),  array(),  array(),  array(),  array(),  array(),  array(17, 24, 26, 27, 29, 30, 36, 37, 38, 53, 60, 64, 78, ),  array(17, 20, 29, 37, 60, ),  array(16, 18, 19, 35, ),  array(37, 58, 60, 64, ),  array(17, 29, 37, 60, ),  array(31, 37, 60, ),  array(36, 38, ),  array(24, 36, ),  array(2, 20, ),  array(25, 78, ),  array(17, 25, ),  array(36, 38, ),  array(36, 38, ),  array(19, 61, ),  array(36, 64, ),  array(37, 60, ),  array(37, 60, ),  array(20, 58, ),  array(37, ),  array(18, ),  array(19, ),  array(2, ),  array(62, ),  array(18, ),  array(26, ),  array(19, ),  array(18, ),  array(19, ),  array(35, ),  array(37, ),  array(38, ),  array(25, ),  array(54, ),  array(2, ),  array(19, ),  array(19, ),  array(19, ),  array(64, ),  array(19, ),  array(19, ),  array(19, ),  array(58, ),  array(19, ),  array(62, ),  array(35, ),  array(18, ),  array(20, ),  array(18, ),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(),  array(), ); static public $yy_default = array(  391, 573, 544, 590, 544, 590, 590, 544, 590, 590,  590, 590, 590, 590, 590, 590, 590, 590, 590, 590,  590, 590, 590, 590, 590, 590, 590, 590, 590, 590,  590, 590, 590, 590, 590, 590, 590, 590, 590, 590,  590, 590, 590, 590, 590, 590, 590, 590, 590, 590,  590, 590, 590, 590, 590, 590, 452, 452, 452, 452,  590, 590, 590, 457, 590, 590, 590, 590, 590, 590,  590, 542, 454, 481, 482, 485, 486, 478, 543, 476,  463, 575, 576, 473, 459, 457, 477, 434, 462, 574,  490, 489, 501, 465, 452, 388, 590, 452, 452, 509,  472, 590, 452, 590, 556, 452, 452, 590, 452, 590,  590, 465, 590, 465, 517, 465, 517, 510, 517, 510,  465, 590, 465, 590, 590, 517, 590, 590, 590, 510,  590, 590, 465, 590, 590, 590, 590, 590, 590, 590,  590, 590, 590, 590, 590, 493, 553, 475, 492, 469,  488, 468, 510, 452, 452, 470, 494, 551, 590, 518,  590, 534, 517, 537, 590, 590, 590, 590, 590, 590,  590, 590, 590, 535, 590, 590, 590, 590, 590, 590,  590, 536, 590, 590, 590, 515, 590, 590, 590, 589,  472, 509, 545, 546, 517, 589, 531, 407, 557, 554,  550, 550, 517, 550, 517, 467, 501, 590, 501, 501,  501, 590, 590, 529, 491, 491, 590, 590, 590, 590,  501, 487, 497, 555, 590, 590, 529, 590, 590, 460,  590, 590, 590, 590, 529, 590, 491, 503, 529, 590,  590, 590, 590, 590, 590, 590, 497, 590, 590, 499,  590, 590, 590, 437, 417, 389, 571, 431, 432, 441,  572, 540, 435, 588, 461, 539, 525, 523, 503, 526,  524, 514, 513, 530, 436, 570, 464, 538, 522, 442,  552, 541, 567, 529, 528, 443, 444, 549, 440, 439,  430, 429, 451, 433, 438, 445, 446, 498, 496, 500,  506, 466, 495, 449, 447, 547, 548, 448, 450, 416,  398, 397, 399, 400, 401, 396, 395, 390, 392, 393,  394, 402, 403, 412, 411, 413, 414, 415, 410, 409,  404, 405, 406, 408, 467, 511, 422, 421, 423, 532,  424, 420, 585, 512, 508, 533, 418, 419, 425, 426,  581, 582, 583, 586, 587, 579, 578, 428, 427, 584,  577, 471, 569, 504, 474, 505, 507, 479, 502, 521,  516, 519, 527, 520, 480, 483, 564, 563, 565, 566,  568, 562, 561, 484, 558, 559, 560, 580, ); const YYNOCODE = 123; const YYSTACKDEPTH = 100; const YYNSTATE = 388; const YYNRULE = 202; const YYERRORSYMBOL = 80; const YYERRSYMDT = 'yy0'; const YYFALLBACK = 0; static public $yyFallback = array( ); static function Trace($TraceFILE, $zTracePrompt) { if (!$TraceFILE) { $zTracePrompt = 0; } elseif (!$zTracePrompt) { $TraceFILE = 0; } self::$yyTraceFILE = $TraceFILE; self::$yyTracePrompt = $zTracePrompt; } static function PrintTrace() { self::$yyTraceFILE = fopen('php://output', 'w'); self::$yyTracePrompt = '<br>'; } static public $yyTraceFILE; static public $yyTracePrompt; public $yyidx;  public $yyerrcnt;  public $yystack = array();  public $yyTokenName = array( '$', 'VERT', 'COLON', 'COMMENT', 'PHPSTARTTAG', 'PHPENDTAG', 'ASPSTARTTAG', 'ASPENDTAG', 'FAKEPHPSTARTTAG', 'XMLTAG', 'TEXT', 'STRIPON', 'STRIPOFF', 'LITERALSTART', 'LITERALEND', 'LITERAL', 'LDEL', 'RDEL', 'DOLLAR', 'ID', 'EQUAL', 'PTR', 'LDELIF', 'LDELFOR', 'SEMICOLON', 'INCDEC', 'TO', 'STEP', 'LDELFOREACH', 'SPACE', 'AS', 'APTR', 'LDELSETFILTER', 'SMARTYBLOCKCHILD', 'LDELSLASH', 'INTEGER', 'COMMA', 'OPENP', 'CLOSEP', 'MATH', 'UNIMATH', 'ANDSYM', 'ISIN', 'ISDIVBY', 'ISNOTDIVBY', 'ISEVEN', 'ISNOTEVEN', 'ISEVENBY', 'ISNOTEVENBY', 'ISODD', 'ISNOTODD', 'ISODDBY', 'ISNOTODDBY', 'INSTANCEOF', 'QMARK', 'NOT', 'TYPECAST', 'HEX', 'DOT', 'SINGLEQUOTESTRING', 'DOUBLECOLON', 'AT', 'HATCH', 'OPENB', 'CLOSEB', 'EQUALS', 'NOTEQUALS', 'GREATERTHAN', 'LESSTHAN', 'GREATEREQUAL', 'LESSEQUAL', 'IDENTITY', 'NONEIDENTITY', 'MOD', 'LAND', 'LOR', 'LXOR', 'QUOTE', 'BACKTICK', 'DOLLARID', 'error', 'start', 'template', 'template_element', 'smartytag', 'literal', 'literal_elements', 'literal_element', 'value', 'modifierlist', 'attributes', 'expr', 'varindexed', 'statement', 'statements', 'optspace', 'varvar', 'foraction', 'modparameters', 'attribute', 'ternary', 'array', 'ifcond', 'lop', 'variable', 'function', 'doublequoted_with_quotes', 'static_class_access', 'object', 'arrayindex', 'indexdef', 'varvarele', 'objectchain', 'objectelement', 'method', 'params', 'modifier', 'modparameter', 'arrayelements', 'arrayelement', 'doublequoted', 'doublequotedcontent', ); static public $yyRuleName = array(  "start ::= template",  "template ::= template_element",  "template ::= template template_element",  "template ::=",  "template_element ::= smartytag",  "template_element ::= COMMENT",  "template_element ::= literal",  "template_element ::= PHPSTARTTAG",  "template_element ::= PHPENDTAG",  "template_element ::= ASPSTARTTAG",  "template_element ::= ASPENDTAG",  "template_element ::= FAKEPHPSTARTTAG",  "template_element ::= XMLTAG",  "template_element ::= TEXT",  "template_element ::= STRIPON",  "template_element ::= STRIPOFF",  "literal ::= LITERALSTART LITERALEND",  "literal ::= LITERALSTART literal_elements LITERALEND",  "literal_elements ::= literal_elements literal_element",  "literal_elements ::=",  "literal_element ::= literal",  "literal_element ::= LITERAL",  "literal_element ::= PHPSTARTTAG",  "literal_element ::= FAKEPHPSTARTTAG",  "literal_element ::= PHPENDTAG",  "literal_element ::= ASPSTARTTAG",  "literal_element ::= ASPENDTAG",  "smartytag ::= LDEL value RDEL",  "smartytag ::= LDEL value modifierlist attributes RDEL",  "smartytag ::= LDEL value attributes RDEL",  "smartytag ::= LDEL expr modifierlist attributes RDEL",  "smartytag ::= LDEL expr attributes RDEL",  "smartytag ::= LDEL DOLLAR ID EQUAL value RDEL",  "smartytag ::= LDEL DOLLAR ID EQUAL expr RDEL",  "smartytag ::= LDEL DOLLAR ID EQUAL expr attributes RDEL",  "smartytag ::= LDEL varindexed EQUAL expr attributes RDEL",  "smartytag ::= LDEL ID attributes RDEL",  "smartytag ::= LDEL ID RDEL",  "smartytag ::= LDEL ID PTR ID attributes RDEL",  "smartytag ::= LDEL ID modifierlist attributes RDEL",  "smartytag ::= LDEL ID PTR ID modifierlist attributes RDEL",  "smartytag ::= LDELIF expr RDEL",  "smartytag ::= LDELIF expr attributes RDEL",  "smartytag ::= LDELIF statement RDEL",  "smartytag ::= LDELIF statement attributes RDEL",  "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes RDEL",  "foraction ::= EQUAL expr",  "foraction ::= INCDEC",  "smartytag ::= LDELFOR statement TO expr attributes RDEL",  "smartytag ::= LDELFOR statement TO expr STEP expr attributes RDEL",  "smartytag ::= LDELFOREACH attributes RDEL",  "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar attributes RDEL",  "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar attributes RDEL",  "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes RDEL",  "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes RDEL",  "smartytag ::= LDELSETFILTER ID modparameters RDEL",  "smartytag ::= LDELSETFILTER ID modparameters modifierlist RDEL",  "smartytag ::= SMARTYBLOCKCHILD",  "smartytag ::= LDELSLASH ID RDEL",  "smartytag ::= LDELSLASH ID modifierlist RDEL",  "smartytag ::= LDELSLASH ID PTR ID RDEL",  "smartytag ::= LDELSLASH ID PTR ID modifierlist RDEL",  "attributes ::= attributes attribute",  "attributes ::= attribute",  "attributes ::=",  "attribute ::= SPACE ID EQUAL ID",  "attribute ::= SPACE ID EQUAL expr",  "attribute ::= SPACE ID EQUAL value",  "attribute ::= SPACE ID",  "attribute ::= SPACE expr",  "attribute ::= SPACE value",  "attribute ::= SPACE INTEGER EQUAL expr",  "statements ::= statement",  "statements ::= statements COMMA statement",  "statement ::= DOLLAR varvar EQUAL expr",  "statement ::= varindexed EQUAL expr",  "statement ::= OPENP statement CLOSEP",  "expr ::= value",  "expr ::= ternary",  "expr ::= DOLLAR ID COLON ID",  "expr ::= expr MATH value",  "expr ::= expr UNIMATH value",  "expr ::= expr ANDSYM value",  "expr ::= array",  "expr ::= expr modifierlist",  "expr ::= expr ifcond expr",  "expr ::= expr ISIN array",  "expr ::= expr ISIN value",  "expr ::= expr lop expr",  "expr ::= expr ISDIVBY expr",  "expr ::= expr ISNOTDIVBY expr",  "expr ::= expr ISEVEN",  "expr ::= expr ISNOTEVEN",  "expr ::= expr ISEVENBY expr",  "expr ::= expr ISNOTEVENBY expr",  "expr ::= expr ISODD",  "expr ::= expr ISNOTODD",  "expr ::= expr ISODDBY expr",  "expr ::= expr ISNOTODDBY expr",  "expr ::= value INSTANCEOF ID",  "expr ::= value INSTANCEOF value",  "ternary ::= OPENP expr CLOSEP QMARK DOLLAR ID COLON expr",  "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",  "value ::= variable",  "value ::= UNIMATH value",  "value ::= NOT value",  "value ::= TYPECAST value",  "value ::= variable INCDEC",  "value ::= HEX",  "value ::= INTEGER",  "value ::= INTEGER DOT INTEGER",  "value ::= INTEGER DOT",  "value ::= DOT INTEGER",  "value ::= ID",  "value ::= function",  "value ::= OPENP expr CLOSEP",  "value ::= SINGLEQUOTESTRING",  "value ::= doublequoted_with_quotes",  "value ::= ID DOUBLECOLON static_class_access",  "value ::= varindexed DOUBLECOLON static_class_access",  "value ::= smartytag",  "value ::= value modifierlist",  "variable ::= varindexed",  "variable ::= DOLLAR varvar AT ID",  "variable ::= object",  "variable ::= HATCH ID HATCH",  "variable ::= HATCH variable HATCH",  "varindexed ::= DOLLAR varvar arrayindex",  "arrayindex ::= arrayindex indexdef",  "arrayindex ::=",  "indexdef ::= DOT DOLLAR varvar",  "indexdef ::= DOT DOLLAR varvar AT ID",  "indexdef ::= DOT ID",  "indexdef ::= DOT INTEGER",  "indexdef ::= DOT LDEL expr RDEL",  "indexdef ::= OPENB ID CLOSEB",  "indexdef ::= OPENB ID DOT ID CLOSEB",  "indexdef ::= OPENB expr CLOSEB",  "indexdef ::= OPENB CLOSEB",  "varvar ::= varvarele",  "varvar ::= varvar varvarele",  "varvarele ::= ID",  "varvarele ::= LDEL expr RDEL",  "object ::= varindexed objectchain",  "objectchain ::= objectelement",  "objectchain ::= objectchain objectelement",  "objectelement ::= PTR ID arrayindex",  "objectelement ::= PTR DOLLAR varvar arrayindex",  "objectelement ::= PTR LDEL expr RDEL arrayindex",  "objectelement ::= PTR ID LDEL expr RDEL arrayindex",  "objectelement ::= PTR method",  "function ::= ID OPENP params CLOSEP",  "method ::= ID OPENP params CLOSEP",  "method ::= DOLLAR ID OPENP params CLOSEP",  "params ::= params COMMA expr",  "params ::= expr",  "params ::=",  "modifierlist ::= modifierlist modifier modparameters",  "modifierlist ::= modifier modparameters",  "modifier ::= VERT AT ID",  "modifier ::= VERT ID",  "modparameters ::= modparameters modparameter",  "modparameters ::=",  "modparameter ::= COLON value",  "modparameter ::= COLON array",  "static_class_access ::= method",  "static_class_access ::= method objectchain",  "static_class_access ::= ID",  "static_class_access ::= DOLLAR ID arrayindex",  "static_class_access ::= DOLLAR ID arrayindex objectchain",  "ifcond ::= EQUALS",  "ifcond ::= NOTEQUALS",  "ifcond ::= GREATERTHAN",  "ifcond ::= LESSTHAN",  "ifcond ::= GREATEREQUAL",  "ifcond ::= LESSEQUAL",  "ifcond ::= IDENTITY",  "ifcond ::= NONEIDENTITY",  "ifcond ::= MOD",  "lop ::= LAND",  "lop ::= LOR",  "lop ::= LXOR",  "array ::= OPENB arrayelements CLOSEB",  "arrayelements ::= arrayelement",  "arrayelements ::= arrayelements COMMA arrayelement",  "arrayelements ::=",  "arrayelement ::= value APTR expr",  "arrayelement ::= ID APTR expr",  "arrayelement ::= expr",  "doublequoted_with_quotes ::= QUOTE QUOTE",  "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",  "doublequoted ::= doublequoted doublequotedcontent",  "doublequoted ::= doublequotedcontent",  "doublequotedcontent ::= BACKTICK variable BACKTICK",  "doublequotedcontent ::= BACKTICK expr BACKTICK",  "doublequotedcontent ::= DOLLARID",  "doublequotedcontent ::= LDEL variable RDEL",  "doublequotedcontent ::= LDEL expr RDEL",  "doublequotedcontent ::= smartytag",  "doublequotedcontent ::= TEXT",  "optspace ::= SPACE",  "optspace ::=", ); function tokenName($tokenType) { if ($tokenType === 0) { return 'End of Input'; } if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) { return $this->yyTokenName[$tokenType]; } else { return "Unknown"; } } static function yy_destructor($yymajor, $yypminor) { switch ($yymajor) { default: break;  } } function yy_pop_parser_stack() { if (!count($this->yystack)) { return; } $yytos = array_pop($this->yystack); if (self::$yyTraceFILE && $this->yyidx >= 0) { fwrite(self::$yyTraceFILE, self::$yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] . "\n"); } $yymajor = $yytos->major; self::yy_destructor($yymajor, $yytos->minor); $this->yyidx--; return $yymajor; } function __destruct() { while ($this->yystack !== Array()) { $this->yy_pop_parser_stack(); } if (is_resource(self::$yyTraceFILE)) { fclose(self::$yyTraceFILE); } } function yy_get_expected_tokens($token) { $state = $this->yystack[$this->yyidx]->stateno; $expected = self::$yyExpectedTokens[$state]; if (in_array($token, self::$yyExpectedTokens[$state], true)) { return $expected; } $stack = $this->yystack; $yyidx = $this->yyidx; do { $yyact = $this->yy_find_shift_action($token); if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {  $done = 0; do { if ($done++ == 100) { $this->yyidx = $yyidx; $this->yystack = $stack;   return array_unique($expected); } $yyruleno = $yyact - self::YYNSTATE; $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs']; $nextstate = $this->yy_find_reduce_action( $this->yystack[$this->yyidx]->stateno, self::$yyRuleInfo[$yyruleno]['lhs']); if (isset(self::$yyExpectedTokens[$nextstate])) { $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]); if (in_array($token, self::$yyExpectedTokens[$nextstate], true)) { $this->yyidx = $yyidx; $this->yystack = $stack; return array_unique($expected); } } if ($nextstate < self::YYNSTATE) {  $this->yyidx++; $x = new TP_yyStackEntry; $x->stateno = $nextstate; $x->major = self::$yyRuleInfo[$yyruleno]['lhs']; $this->yystack[$this->yyidx] = $x; continue 2; } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) { $this->yyidx = $yyidx; $this->yystack = $stack;    return array_unique($expected); } elseif ($nextstate === self::YY_NO_ACTION) { $this->yyidx = $yyidx; $this->yystack = $stack;  return $expected; } else { $yyact = $nextstate; } } while (true); } break; } while (true); $this->yyidx = $yyidx; $this->yystack = $stack; return array_unique($expected); } function yy_is_expected_token($token) { if ($token === 0) { return true;  } $state = $this->yystack[$this->yyidx]->stateno; if (in_array($token, self::$yyExpectedTokens[$state], true)) { return true; } $stack = $this->yystack; $yyidx = $this->yyidx; do { $yyact = $this->yy_find_shift_action($token); if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {  $done = 0; do { if ($done++ == 100) { $this->yyidx = $yyidx; $this->yystack = $stack;   return true; } $yyruleno = $yyact - self::YYNSTATE; $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs']; $nextstate = $this->yy_find_reduce_action( $this->yystack[$this->yyidx]->stateno, self::$yyRuleInfo[$yyruleno]['lhs']); if (isset(self::$yyExpectedTokens[$nextstate]) && in_array($token, self::$yyExpectedTokens[$nextstate], true)) { $this->yyidx = $yyidx; $this->yystack = $stack; return true; } if ($nextstate < self::YYNSTATE) {  $this->yyidx++; $x = new TP_yyStackEntry; $x->stateno = $nextstate; $x->major = self::$yyRuleInfo[$yyruleno]['lhs']; $this->yystack[$this->yyidx] = $x; continue 2; } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) { $this->yyidx = $yyidx; $this->yystack = $stack; if (!$token) {  return true; }    return false; } elseif ($nextstate === self::YY_NO_ACTION) { $this->yyidx = $yyidx; $this->yystack = $stack;  return true; } else { $yyact = $nextstate; } } while (true); } break; } while (true); $this->yyidx = $yyidx; $this->yystack = $stack; return true; } function yy_find_shift_action($iLookAhead) { $stateno = $this->yystack[$this->yyidx]->stateno;  if (!isset(self::$yy_shift_ofst[$stateno])) {  return self::$yy_default[$stateno]; } $i = self::$yy_shift_ofst[$stateno]; if ($i === self::YY_SHIFT_USE_DFLT) { return self::$yy_default[$stateno]; } if ($iLookAhead == self::YYNOCODE) { return self::YY_NO_ACTION; } $i += $iLookAhead; if ($i < 0 || $i >= self::YY_SZ_ACTTAB || self::$yy_lookahead[$i] != $iLookAhead) { if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback) && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) { if (self::$yyTraceFILE) { fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " . $this->yyTokenName[$iLookAhead] . " => " . $this->yyTokenName[$iFallback] . "\n"); } return $this->yy_find_shift_action($iFallback); } return self::$yy_default[$stateno]; } else { return self::$yy_action[$i]; } } function yy_find_reduce_action($stateno, $iLookAhead) {  if (!isset(self::$yy_reduce_ofst[$stateno])) { return self::$yy_default[$stateno]; } $i = self::$yy_reduce_ofst[$stateno]; if ($i == self::YY_REDUCE_USE_DFLT) { return self::$yy_default[$stateno]; } if ($iLookAhead == self::YYNOCODE) { return self::YY_NO_ACTION; } $i += $iLookAhead; if ($i < 0 || $i >= self::YY_SZ_ACTTAB || self::$yy_lookahead[$i] != $iLookAhead) { return self::$yy_default[$stateno]; } else { return self::$yy_action[$i]; } } function yy_shift($yyNewState, $yyMajor, $yypMinor) { $this->yyidx++; if ($this->yyidx >= self::YYSTACKDEPTH) { $this->yyidx--; if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt); } while ($this->yyidx >= 0) { $this->yy_pop_parser_stack(); }  $this->internalError = true; $this->compiler->trigger_template_error("Stack overflow in template parser");  return; } $yytos = new TP_yyStackEntry; $yytos->stateno = $yyNewState; $yytos->major = $yyMajor; $yytos->minor = $yypMinor; array_push($this->yystack, $yytos); if (self::$yyTraceFILE && $this->yyidx > 0) { fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt, $yyNewState); fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt); for($i = 1; $i <= $this->yyidx; $i++) { fprintf(self::$yyTraceFILE, " %s", $this->yyTokenName[$this->yystack[$i]->major]); } fwrite(self::$yyTraceFILE,"\n"); } } static public $yyRuleInfo = array( array( 'lhs' => 81, 'rhs' => 1 ), array( 'lhs' => 82, 'rhs' => 1 ), array( 'lhs' => 82, 'rhs' => 2 ), array( 'lhs' => 82, 'rhs' => 0 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 85, 'rhs' => 2 ), array( 'lhs' => 85, 'rhs' => 3 ), array( 'lhs' => 86, 'rhs' => 2 ), array( 'lhs' => 86, 'rhs' => 0 ), array( 'lhs' => 87, 'rhs' => 1 ), array( 'lhs' => 87, 'rhs' => 1 ), array( 'lhs' => 87, 'rhs' => 1 ), array( 'lhs' => 87, 'rhs' => 1 ), array( 'lhs' => 87, 'rhs' => 1 ), array( 'lhs' => 87, 'rhs' => 1 ), array( 'lhs' => 87, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 3 ), array( 'lhs' => 84, 'rhs' => 5 ), array( 'lhs' => 84, 'rhs' => 4 ), array( 'lhs' => 84, 'rhs' => 5 ), array( 'lhs' => 84, 'rhs' => 4 ), array( 'lhs' => 84, 'rhs' => 6 ), array( 'lhs' => 84, 'rhs' => 6 ), array( 'lhs' => 84, 'rhs' => 7 ), array( 'lhs' => 84, 'rhs' => 6 ), array( 'lhs' => 84, 'rhs' => 4 ), array( 'lhs' => 84, 'rhs' => 3 ), array( 'lhs' => 84, 'rhs' => 6 ), array( 'lhs' => 84, 'rhs' => 5 ), array( 'lhs' => 84, 'rhs' => 7 ), array( 'lhs' => 84, 'rhs' => 3 ), array( 'lhs' => 84, 'rhs' => 4 ), array( 'lhs' => 84, 'rhs' => 3 ), array( 'lhs' => 84, 'rhs' => 4 ), array( 'lhs' => 84, 'rhs' => 12 ), array( 'lhs' => 97, 'rhs' => 2 ), array( 'lhs' => 97, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 6 ), array( 'lhs' => 84, 'rhs' => 8 ), array( 'lhs' => 84, 'rhs' => 3 ), array( 'lhs' => 84, 'rhs' => 8 ), array( 'lhs' => 84, 'rhs' => 11 ), array( 'lhs' => 84, 'rhs' => 8 ), array( 'lhs' => 84, 'rhs' => 11 ), array( 'lhs' => 84, 'rhs' => 4 ), array( 'lhs' => 84, 'rhs' => 5 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 3 ), array( 'lhs' => 84, 'rhs' => 4 ), array( 'lhs' => 84, 'rhs' => 5 ), array( 'lhs' => 84, 'rhs' => 6 ), array( 'lhs' => 90, 'rhs' => 2 ), array( 'lhs' => 90, 'rhs' => 1 ), array( 'lhs' => 90, 'rhs' => 0 ), array( 'lhs' => 99, 'rhs' => 4 ), array( 'lhs' => 99, 'rhs' => 4 ), array( 'lhs' => 99, 'rhs' => 4 ), array( 'lhs' => 99, 'rhs' => 2 ), array( 'lhs' => 99, 'rhs' => 2 ), array( 'lhs' => 99, 'rhs' => 2 ), array( 'lhs' => 99, 'rhs' => 4 ), array( 'lhs' => 94, 'rhs' => 1 ), array( 'lhs' => 94, 'rhs' => 3 ), array( 'lhs' => 93, 'rhs' => 4 ), array( 'lhs' => 93, 'rhs' => 3 ), array( 'lhs' => 93, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 1 ), array( 'lhs' => 91, 'rhs' => 1 ), array( 'lhs' => 91, 'rhs' => 4 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 1 ), array( 'lhs' => 91, 'rhs' => 2 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 2 ), array( 'lhs' => 91, 'rhs' => 2 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 2 ), array( 'lhs' => 91, 'rhs' => 2 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 91, 'rhs' => 3 ), array( 'lhs' => 100, 'rhs' => 8 ), array( 'lhs' => 100, 'rhs' => 7 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 2 ), array( 'lhs' => 88, 'rhs' => 2 ), array( 'lhs' => 88, 'rhs' => 2 ), array( 'lhs' => 88, 'rhs' => 2 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 3 ), array( 'lhs' => 88, 'rhs' => 2 ), array( 'lhs' => 88, 'rhs' => 2 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 3 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 3 ), array( 'lhs' => 88, 'rhs' => 3 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 2 ), array( 'lhs' => 104, 'rhs' => 1 ), array( 'lhs' => 104, 'rhs' => 4 ), array( 'lhs' => 104, 'rhs' => 1 ), array( 'lhs' => 104, 'rhs' => 3 ), array( 'lhs' => 104, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 109, 'rhs' => 2 ), array( 'lhs' => 109, 'rhs' => 0 ), array( 'lhs' => 110, 'rhs' => 3 ), array( 'lhs' => 110, 'rhs' => 5 ), array( 'lhs' => 110, 'rhs' => 2 ), array( 'lhs' => 110, 'rhs' => 2 ), array( 'lhs' => 110, 'rhs' => 4 ), array( 'lhs' => 110, 'rhs' => 3 ), array( 'lhs' => 110, 'rhs' => 5 ), array( 'lhs' => 110, 'rhs' => 3 ), array( 'lhs' => 110, 'rhs' => 2 ), array( 'lhs' => 96, 'rhs' => 1 ), array( 'lhs' => 96, 'rhs' => 2 ), array( 'lhs' => 111, 'rhs' => 1 ), array( 'lhs' => 111, 'rhs' => 3 ), array( 'lhs' => 108, 'rhs' => 2 ), array( 'lhs' => 112, 'rhs' => 1 ), array( 'lhs' => 112, 'rhs' => 2 ), array( 'lhs' => 113, 'rhs' => 3 ), array( 'lhs' => 113, 'rhs' => 4 ), array( 'lhs' => 113, 'rhs' => 5 ), array( 'lhs' => 113, 'rhs' => 6 ), array( 'lhs' => 113, 'rhs' => 2 ), array( 'lhs' => 105, 'rhs' => 4 ), array( 'lhs' => 114, 'rhs' => 4 ), array( 'lhs' => 114, 'rhs' => 5 ), array( 'lhs' => 115, 'rhs' => 3 ), array( 'lhs' => 115, 'rhs' => 1 ), array( 'lhs' => 115, 'rhs' => 0 ), array( 'lhs' => 89, 'rhs' => 3 ), array( 'lhs' => 89, 'rhs' => 2 ), array( 'lhs' => 116, 'rhs' => 3 ), array( 'lhs' => 116, 'rhs' => 2 ), array( 'lhs' => 98, 'rhs' => 2 ), array( 'lhs' => 98, 'rhs' => 0 ), array( 'lhs' => 117, 'rhs' => 2 ), array( 'lhs' => 117, 'rhs' => 2 ), array( 'lhs' => 107, 'rhs' => 1 ), array( 'lhs' => 107, 'rhs' => 2 ), array( 'lhs' => 107, 'rhs' => 1 ), array( 'lhs' => 107, 'rhs' => 3 ), array( 'lhs' => 107, 'rhs' => 4 ), array( 'lhs' => 102, 'rhs' => 1 ), array( 'lhs' => 102, 'rhs' => 1 ), array( 'lhs' => 102, 'rhs' => 1 ), array( 'lhs' => 102, 'rhs' => 1 ), array( 'lhs' => 102, 'rhs' => 1 ), array( 'lhs' => 102, 'rhs' => 1 ), array( 'lhs' => 102, 'rhs' => 1 ), array( 'lhs' => 102, 'rhs' => 1 ), array( 'lhs' => 102, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 101, 'rhs' => 3 ), array( 'lhs' => 118, 'rhs' => 1 ), array( 'lhs' => 118, 'rhs' => 3 ), array( 'lhs' => 118, 'rhs' => 0 ), array( 'lhs' => 119, 'rhs' => 3 ), array( 'lhs' => 119, 'rhs' => 3 ), array( 'lhs' => 119, 'rhs' => 1 ), array( 'lhs' => 106, 'rhs' => 2 ), array( 'lhs' => 106, 'rhs' => 3 ), array( 'lhs' => 120, 'rhs' => 2 ), array( 'lhs' => 120, 'rhs' => 1 ), array( 'lhs' => 121, 'rhs' => 3 ), array( 'lhs' => 121, 'rhs' => 3 ), array( 'lhs' => 121, 'rhs' => 1 ), array( 'lhs' => 121, 'rhs' => 3 ), array( 'lhs' => 121, 'rhs' => 3 ), array( 'lhs' => 121, 'rhs' => 1 ), array( 'lhs' => 121, 'rhs' => 1 ), array( 'lhs' => 95, 'rhs' => 1 ), array( 'lhs' => 95, 'rhs' => 0 ), ); static public $yyReduceMap = array( 0 => 0, 1 => 1, 2 => 1, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10, 11 => 11, 12 => 12, 13 => 13, 14 => 14, 15 => 15, 16 => 16, 19 => 16, 201 => 16, 17 => 17, 76 => 17, 18 => 18, 104 => 18, 106 => 18, 107 => 18, 128 => 18, 166 => 18, 20 => 20, 21 => 20, 47 => 20, 69 => 20, 70 => 20, 77 => 20, 78 => 20, 83 => 20, 103 => 20, 108 => 20, 109 => 20, 114 => 20, 116 => 20, 117 => 20, 124 => 20, 139 => 20, 165 => 20, 167 => 20, 183 => 20, 188 => 20, 200 => 20, 22 => 22, 23 => 22, 24 => 24, 25 => 25, 26 => 26, 27 => 27, 28 => 28, 29 => 29, 31 => 29, 30 => 30, 32 => 32, 33 => 32, 34 => 34, 35 => 35, 36 => 36, 37 => 37, 38 => 38, 39 => 39, 40 => 40, 41 => 41, 42 => 42, 44 => 42, 43 => 43, 45 => 45, 46 => 46, 48 => 48, 49 => 49, 50 => 50, 51 => 51, 52 => 52, 53 => 53, 54 => 54, 55 => 55, 56 => 56, 57 => 57, 58 => 58, 59 => 59, 60 => 60, 61 => 61, 62 => 62, 63 => 63, 72 => 63, 155 => 63, 159 => 63, 163 => 63, 164 => 63, 64 => 64, 156 => 64, 162 => 64, 65 => 65, 66 => 66, 67 => 66, 71 => 66, 68 => 68, 73 => 73, 74 => 74, 75 => 74, 79 => 79, 80 => 80, 81 => 80, 82 => 80, 84 => 84, 121 => 84, 85 => 85, 88 => 85, 99 => 85, 86 => 86, 87 => 87, 89 => 89, 90 => 90, 91 => 91, 96 => 91, 92 => 92, 95 => 92, 93 => 93, 98 => 93, 94 => 94, 97 => 94, 100 => 100, 101 => 101, 102 => 102, 105 => 105, 110 => 110, 111 => 111, 112 => 112, 113 => 113, 115 => 115, 118 => 118, 119 => 119, 120 => 120, 122 => 122, 123 => 123, 125 => 125, 126 => 126, 127 => 127, 129 => 129, 185 => 129, 130 => 130, 131 => 131, 132 => 132, 133 => 133, 134 => 134, 137 => 134, 135 => 135, 136 => 136, 138 => 138, 140 => 140, 141 => 141, 142 => 142, 143 => 143, 144 => 144, 145 => 145, 146 => 146, 147 => 147, 148 => 148, 149 => 149, 150 => 150, 151 => 151, 152 => 152, 153 => 153, 154 => 154, 157 => 157, 158 => 158, 160 => 160, 161 => 161, 168 => 168, 169 => 169, 170 => 170, 171 => 171, 172 => 172, 173 => 173, 174 => 174, 175 => 175, 176 => 176, 177 => 177, 178 => 178, 179 => 179, 180 => 180, 181 => 181, 182 => 182, 184 => 184, 186 => 186, 187 => 187, 189 => 189, 190 => 190, 191 => 191, 192 => 192, 193 => 193, 194 => 193, 196 => 193, 195 => 195, 197 => 197, 198 => 198, 199 => 199, );  function yy_r0(){ $this->_retvalue = $this->root_buffer->to_smarty_php(); }  function yy_r1(){ $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor); }  function yy_r4(){ if ($this->compiler->has_code) { $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array(); $this->_retvalue = new _smarty_tag($this, $this->compiler->processNocacheCode($tmp.$this->yystack[$this->yyidx + 0]->minor,true)); } else { $this->_retvalue = new _smarty_tag($this, $this->yystack[$this->yyidx + 0]->minor); } $this->compiler->has_variable_string = false; $this->block_nesting_level = count($this->compiler->_tag_stack); }  function yy_r5(){ $this->_retvalue = new _smarty_tag($this, ''); }  function yy_r6(){ $this->_retvalue = new _smarty_text($this, $this->yystack[$this->yyidx + 0]->minor); }  function yy_r7(){ if ($this->php_handling == Smarty::PHP_PASSTHRU) { $this->_retvalue = new _smarty_text($this, self::escape_start_tag($this->yystack[$this->yyidx + 0]->minor)); } elseif ($this->php_handling == Smarty::PHP_QUOTE) { $this->_retvalue = new _smarty_text($this, htmlspecialchars($this->yystack[$this->yyidx + 0]->minor, ENT_QUOTES)); } elseif ($this->php_handling == Smarty::PHP_ALLOW) { if (!($this->smarty instanceof SmartyBC)) { $this->compiler->trigger_template_error (self::Err3); } $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode('<?php', true)); } elseif ($this->php_handling == Smarty::PHP_REMOVE) { $this->_retvalue = new _smarty_text($this, ''); } }  function yy_r8(){ if ($this->is_xml) { $this->compiler->tag_nocache = true; $this->is_xml = false; $save = $this->template->has_nocache_code; $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode("<?php echo '?>';?>", $this->compiler, true)); $this->template->has_nocache_code = $save; } elseif ($this->php_handling == Smarty::PHP_PASSTHRU) { $this->_retvalue = new _smarty_text($this, '?<?php ?>>'); } elseif ($this->php_handling == Smarty::PHP_QUOTE) { $this->_retvalue = new _smarty_text($this, htmlspecialchars('?>', ENT_QUOTES)); } elseif ($this->php_handling == Smarty::PHP_ALLOW) { $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode('?>', true)); } elseif ($this->php_handling == Smarty::PHP_REMOVE) { $this->_retvalue = new _smarty_text($this, ''); } }  function yy_r9(){ if ($this->php_handling == Smarty::PHP_PASSTHRU) { $this->_retvalue = new _smarty_text($this, '<<?php ?>%'); } elseif ($this->php_handling == Smarty::PHP_QUOTE) { $this->_retvalue = new _smarty_text($this, htmlspecialchars($this->yystack[$this->yyidx + 0]->minor, ENT_QUOTES)); } elseif ($this->php_handling == Smarty::PHP_ALLOW) { if ($this->asp_tags) { if (!($this->smarty instanceof SmartyBC)) { $this->compiler->trigger_template_error (self::Err3); } $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode('<%', true)); } else { $this->_retvalue = new _smarty_text($this, '<<?php ?>%'); } } elseif ($this->php_handling == Smarty::PHP_REMOVE) { if ($this->asp_tags) { $this->_retvalue = new _smarty_text($this, ''); } else { $this->_retvalue = new _smarty_text($this, '<<?php ?>%'); } } }  function yy_r10(){ if ($this->php_handling == Smarty::PHP_PASSTHRU) { $this->_retvalue = new _smarty_text($this, '%<?php ?>>'); } elseif ($this->php_handling == Smarty::PHP_QUOTE) { $this->_retvalue = new _smarty_text($this, htmlspecialchars('%>', ENT_QUOTES)); } elseif ($this->php_handling == Smarty::PHP_ALLOW) { if ($this->asp_tags) { $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode('%>', true)); } else { $this->_retvalue = new _smarty_text($this, '%<?php ?>>'); } } elseif ($this->php_handling == Smarty::PHP_REMOVE) { if ($this->asp_tags) { $this->_retvalue = new _smarty_text($this, ''); } else { $this->_retvalue = new _smarty_text($this, '%<?php ?>>'); } } }  function yy_r11(){ if ($this->strip) { $this->_retvalue = new _smarty_text($this, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', self::escape_start_tag($this->yystack[$this->yyidx + 0]->minor))); } else { $this->_retvalue = new _smarty_text($this, self::escape_start_tag($this->yystack[$this->yyidx + 0]->minor)); } }  function yy_r12(){ $this->compiler->tag_nocache = true; $this->is_xml = true; $save = $this->template->has_nocache_code; $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode("<?php echo '<?xml';?>", $this->compiler, true)); $this->template->has_nocache_code = $save; }  function yy_r13(){ if ($this->strip) { $this->_retvalue = new _smarty_text($this, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', $this->yystack[$this->yyidx + 0]->minor)); } else { $this->_retvalue = new _smarty_text($this, $this->yystack[$this->yyidx + 0]->minor); } }  function yy_r14(){ $this->strip = true; $this->_retvalue = new _smarty_text($this, ''); }  function yy_r15(){ $this->strip = false; $this->_retvalue = new _smarty_text($this, ''); }  function yy_r16(){ $this->_retvalue = ''; }  function yy_r17(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; }  function yy_r18(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r20(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor; }  function yy_r22(){ $this->_retvalue = self::escape_start_tag($this->yystack[$this->yyidx + 0]->minor); }  function yy_r24(){ $this->_retvalue = self::escape_end_tag($this->yystack[$this->yyidx + 0]->minor); }  function yy_r25(){ $this->_retvalue = '<<?php ?>%'; }  function yy_r26(){ $this->_retvalue = '%<?php ?>>'; }  function yy_r27(){ $this->_retvalue = $this->compiler->compileTag('private_print_expression',array(),array('value'=>$this->yystack[$this->yyidx + -1]->minor)); }  function yy_r28(){ $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + -1]->minor,array('value'=>$this->yystack[$this->yyidx + -3]->minor, 'modifierlist'=>$this->yystack[$this->yyidx + -2]->minor)); }  function yy_r29(){ $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + -1]->minor,array('value'=>$this->yystack[$this->yyidx + -2]->minor)); }  function yy_r30(){ $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + -1]->minor,array('value'=>$this->yystack[$this->yyidx + -3]->minor,'modifierlist'=>$this->yystack[$this->yyidx + -2]->minor)); }  function yy_r32(){ $this->_retvalue = $this->compiler->compileTag('assign',array(array('value'=>$this->yystack[$this->yyidx + -1]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -3]->minor."'"))); }  function yy_r34(){ $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + -2]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -4]->minor."'")),$this->yystack[$this->yyidx + -1]->minor)); }  function yy_r35(){ $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + -2]->minor),array('var'=>$this->yystack[$this->yyidx + -4]->minor['var'])),$this->yystack[$this->yyidx + -1]->minor),array('smarty_internal_index'=>$this->yystack[$this->yyidx + -4]->minor['smarty_internal_index'])); }  function yy_r36(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + -1]->minor); }  function yy_r37(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,array()); }  function yy_r38(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -1]->minor,array('object_methode'=>$this->yystack[$this->yyidx + -2]->minor)); }  function yy_r39(){ $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + -1]->minor).'<?php echo '; $this->_retvalue .= $this->compiler->compileTag('private_modifier',array(),array('modifierlist'=>$this->yystack[$this->yyidx + -2]->minor,'value'=>'ob_get_clean()')).'?>'; }  function yy_r40(){ $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -5]->minor,$this->yystack[$this->yyidx + -1]->minor,array('object_methode'=>$this->yystack[$this->yyidx + -3]->minor)).'<?php echo '; $this->_retvalue .= $this->compiler->compileTag('private_modifier',array(),array('modifierlist'=>$this->yystack[$this->yyidx + -2]->minor,'value'=>'ob_get_clean()')).'?>'; }  function yy_r41(){ $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor,$this->lex->ldel_length)); $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + -1]->minor)); }  function yy_r42(){ $tag = trim(substr($this->yystack[$this->yyidx + -3]->minor,$this->lex->ldel_length)); $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,$this->yystack[$this->yyidx + -1]->minor,array('if condition'=>$this->yystack[$this->yyidx + -2]->minor)); }  function yy_r43(){ $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor,$this->lex->ldel_length)); $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + -1]->minor)); }  function yy_r45(){ $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('start'=>$this->yystack[$this->yyidx + -10]->minor),array('ifexp'=>$this->yystack[$this->yyidx + -7]->minor),array('var'=>$this->yystack[$this->yyidx + -3]->minor),array('step'=>$this->yystack[$this->yyidx + -2]->minor))),1); }  function yy_r46(){ $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r48(){ $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('start'=>$this->yystack[$this->yyidx + -4]->minor),array('to'=>$this->yystack[$this->yyidx + -2]->minor))),0); }  function yy_r49(){ $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('start'=>$this->yystack[$this->yyidx + -6]->minor),array('to'=>$this->yystack[$this->yyidx + -4]->minor),array('step'=>$this->yystack[$this->yyidx + -2]->minor))),0); }  function yy_r50(){ $this->_retvalue = $this->compiler->compileTag('foreach',$this->yystack[$this->yyidx + -1]->minor); }  function yy_r51(){ $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('from'=>$this->yystack[$this->yyidx + -5]->minor),array('item'=>$this->yystack[$this->yyidx + -2]->minor)))); }  function yy_r52(){ $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('from'=>$this->yystack[$this->yyidx + -8]->minor),array('item'=>$this->yystack[$this->yyidx + -2]->minor),array('key'=>$this->yystack[$this->yyidx + -5]->minor)))); }  function yy_r53(){ $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('from'=>$this->yystack[$this->yyidx + -5]->minor),array('item'=>$this->yystack[$this->yyidx + -2]->minor)))); }  function yy_r54(){ $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('from'=>$this->yystack[$this->yyidx + -8]->minor),array('item'=>$this->yystack[$this->yyidx + -2]->minor),array('key'=>$this->yystack[$this->yyidx + -5]->minor)))); }  function yy_r55(){ $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array(array_merge(array($this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor)))); }  function yy_r56(){ $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array_merge(array(array_merge(array($this->yystack[$this->yyidx + -3]->minor),$this->yystack[$this->yyidx + -2]->minor)),$this->yystack[$this->yyidx + -1]->minor))); }  function yy_r57(){ $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler); }  function yy_r58(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array()); }  function yy_r59(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor.'close',array(),array('modifier_list'=>$this->yystack[$this->yyidx + -1]->minor)); }  function yy_r60(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor.'close',array(),array('object_methode'=>$this->yystack[$this->yyidx + -1]->minor)); }  function yy_r61(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor.'close',array(),array('object_methode'=>$this->yystack[$this->yyidx + -2]->minor, 'modifier_list'=>$this->yystack[$this->yyidx + -1]->minor)); }  function yy_r62(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor; }  function yy_r63(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor); }  function yy_r64(){ $this->_retvalue = array(); }  function yy_r65(){ if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'true'); } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'false'); } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'null'); } else { $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'"); } }  function yy_r66(){ $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor); }  function yy_r68(){ $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'"; }  function yy_r73(){ $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; }  function yy_r74(){ $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor); }  function yy_r79(){ $this->_retvalue = '$_smarty_tpl->getStreamVariable(\''. $this->yystack[$this->yyidx + -2]->minor .'://'. $this->yystack[$this->yyidx + 0]->minor . '\')'; }  function yy_r80(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor; }  function yy_r84(){ $this->_retvalue = $this->compiler->compileTag('private_modifier',array(),array('value'=>$this->yystack[$this->yyidx + -1]->minor,'modifierlist'=>$this->yystack[$this->yyidx + 0]->minor)); }  function yy_r85(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r86(){ $this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')'; }  function yy_r87(){ $this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')'; }  function yy_r89(){ $this->_retvalue = '!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')'; }  function yy_r90(){ $this->_retvalue = '('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')'; }  function yy_r91(){ $this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')'; }  function yy_r92(){ $this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -1]->minor.')'; }  function yy_r93(){ $this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')'; }  function yy_r94(){ $this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')'; }  function yy_r100(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'='.$this->yystack[$this->yyidx + 0]->minor.';?>'; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.$this->prefix_number; }  function yy_r101(){ $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.' ? '. $this->compileVariable("'".$this->yystack[$this->yyidx + -2]->minor."'") . ' : '.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r102(){ $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r105(){ $this->_retvalue = '!'.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r110(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r111(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'; }  function yy_r112(){ $this->_retvalue = '.'.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r113(){ if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = 'true'; } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = 'false'; } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = 'null'; } else { $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'"; } }  function yy_r115(){ $this->_retvalue = "(". $this->yystack[$this->yyidx + -1]->minor .")"; }  function yy_r118(){ if (!$this->security || isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor]) || $this->smarty->security_policy->isTrustedStaticClass($this->yystack[$this->yyidx + -2]->minor, $this->compiler)) { if (isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor])) { $this->_retvalue = $this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor].'::'.$this->yystack[$this->yyidx + 0]->minor; } else { $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor; } } else { $this->compiler->trigger_template_error ("static class '".$this->yystack[$this->yyidx + -2]->minor."' is undefined or not allowed by security setting"); } }  function yy_r119(){ if ($this->yystack[$this->yyidx + -2]->minor['var'] == '\'smarty\'') { $this->_retvalue = $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + -2]->minor['smarty_internal_index']).'::'.$this->yystack[$this->yyidx + 0]->minor; } else { $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor['var']).$this->yystack[$this->yyidx + -2]->minor['smarty_internal_index'].'::'.$this->yystack[$this->yyidx + 0]->minor; } }  function yy_r120(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php ob_start();?>'.$this->yystack[$this->yyidx + 0]->minor.'<?php $_tmp'.$this->prefix_number.'=ob_get_clean();?>'; $this->_retvalue = '$_tmp'.$this->prefix_number; }  function yy_r122(){ if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'smarty\'') { $smarty_var = $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']); $this->_retvalue = $smarty_var; } else {  $this->last_variable = $this->yystack[$this->yyidx + 0]->minor['var']; $this->last_index = $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']; $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor['var']).$this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']; } }  function yy_r123(){ $this->_retvalue = '$_smarty_tpl->tpl_vars['. $this->yystack[$this->yyidx + -2]->minor .']->'.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r125(){ $this->_retvalue = '$_smarty_tpl->getConfigVariable(\''. $this->yystack[$this->yyidx + -1]->minor .'\')'; }  function yy_r126(){ $this->_retvalue = '$_smarty_tpl->getConfigVariable('. $this->yystack[$this->yyidx + -1]->minor .')'; }  function yy_r127(){ $this->_retvalue = array('var'=>$this->yystack[$this->yyidx + -1]->minor, 'smarty_internal_index'=>$this->yystack[$this->yyidx + 0]->minor); }  function yy_r129(){ return; }  function yy_r130(){ $this->_retvalue = '['.$this->compileVariable($this->yystack[$this->yyidx + 0]->minor).']'; }  function yy_r131(){ $this->_retvalue = '['.$this->compileVariable($this->yystack[$this->yyidx + -2]->minor).'->'.$this->yystack[$this->yyidx + 0]->minor.']'; }  function yy_r132(){ $this->_retvalue = "['". $this->yystack[$this->yyidx + 0]->minor ."']"; }  function yy_r133(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + 0]->minor ."]"; }  function yy_r134(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + -1]->minor ."]"; }  function yy_r135(){ $this->_retvalue = '['.$this->compiler->compileTag('private_special_variable',array(),'[\'section\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\'][\'index\']').']'; }  function yy_r136(){ $this->_retvalue = '['.$this->compiler->compileTag('private_special_variable',array(),'[\'section\'][\''.$this->yystack[$this->yyidx + -3]->minor.'\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\']').']'; }  function yy_r138(){ $this->_retvalue = '[]'; }  function yy_r140(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r141(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\''; }  function yy_r142(){ $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')'; }  function yy_r143(){ if ($this->yystack[$this->yyidx + -1]->minor['var'] == '\'smarty\'') { $this->_retvalue = $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index']).$this->yystack[$this->yyidx + 0]->minor; } else { $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -1]->minor['var']).$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index'].$this->yystack[$this->yyidx + 0]->minor; } }  function yy_r144(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor; }  function yy_r145(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r146(){ if ($this->security && substr($this->yystack[$this->yyidx + -1]->minor,0,1) == '_') { $this->compiler->trigger_template_error (self::Err1); } $this->_retvalue = '->'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r147(){ if ($this->security) { $this->compiler->trigger_template_error (self::Err2); } $this->_retvalue = '->{'.$this->compileVariable($this->yystack[$this->yyidx + -1]->minor).$this->yystack[$this->yyidx + 0]->minor.'}'; }  function yy_r148(){ if ($this->security) { $this->compiler->trigger_template_error (self::Err2); } $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}'; }  function yy_r149(){ if ($this->security) { $this->compiler->trigger_template_error (self::Err2); } $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -4]->minor.'\'.'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}'; }  function yy_r150(){ $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r151(){ if (!$this->security || $this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) { if (strcasecmp($this->yystack[$this->yyidx + -3]->minor,'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor,'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor,'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor)) { $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor); if ($func_name == 'isset') { if (count($this->yystack[$this->yyidx + -1]->minor) == 0) { $this->compiler->trigger_template_error ('Illegal number of paramer in "isset()"'); } $par = implode(',',$this->yystack[$this->yyidx + -1]->minor); if (strncasecmp($par,'$_smarty_tpl->getConfigVariable',strlen('$_smarty_tpl->getConfigVariable')) === 0) { $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'='.str_replace(')',', false)',$par).';?>'; $isset_par = '$_tmp'.$this->prefix_number; } else { $isset_par=str_replace("')->value","',null,true,false)->value",$par); } $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")"; } elseif (in_array($func_name,array('empty','reset','current','end','prev','next'))){ if (count($this->yystack[$this->yyidx + -1]->minor) != 1) { $this->compiler->trigger_template_error ('Illegal number of paramer in "empty()"'); } if ($func_name == 'empty') { $this->_retvalue = $func_name.'('.str_replace("')->value","',null,true,false)->value",$this->yystack[$this->yyidx + -1]->minor[0]).')'; } else { $this->_retvalue = $func_name.'('.$this->yystack[$this->yyidx + -1]->minor[0].')'; } } else { $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")"; } } else { $this->compiler->trigger_template_error ("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\""); } } }  function yy_r152(){ if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor,0,1) == '_') { $this->compiler->trigger_template_error (self::Err1); } $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")"; }  function yy_r153(){ if ($this->security) { $this->compiler->trigger_template_error (self::Err2); } $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'='.$this->compileVariable("'".$this->yystack[$this->yyidx + -3]->minor."'").';?>'; $this->_retvalue = '$_tmp'.$this->prefix_number.'('. implode(',',$this->yystack[$this->yyidx + -1]->minor) .')'; }  function yy_r154(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor)); }  function yy_r157(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor))); }  function yy_r158(){ $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)); }  function yy_r160(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor); }  function yy_r161(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor); }  function yy_r168(){ $this->_retvalue = '$'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r169(){ $this->_retvalue = '$'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r170(){ $this->_retvalue = '=='; }  function yy_r171(){ $this->_retvalue = '!='; }  function yy_r172(){ $this->_retvalue = '>'; }  function yy_r173(){ $this->_retvalue = '<'; }  function yy_r174(){ $this->_retvalue = '>='; }  function yy_r175(){ $this->_retvalue = '<='; }  function yy_r176(){ $this->_retvalue = '==='; }  function yy_r177(){ $this->_retvalue = '!=='; }  function yy_r178(){ $this->_retvalue = '%'; }  function yy_r179(){ $this->_retvalue = '&&'; }  function yy_r180(){ $this->_retvalue = '||'; }  function yy_r181(){ $this->_retvalue = ' XOR '; }  function yy_r182(){ $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')'; }  function yy_r184(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r186(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r187(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor; }  function yy_r189(){ $this->_retvalue = "''"; }  function yy_r190(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php(); }  function yy_r191(){ $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor); $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; }  function yy_r192(){ $this->_retvalue = new _smarty_doublequoted($this, $this->yystack[$this->yyidx + 0]->minor); }  function yy_r193(){ $this->_retvalue = new _smarty_code($this, $this->yystack[$this->yyidx + -1]->minor); }  function yy_r195(){ $this->_retvalue = new _smarty_code($this, '$_smarty_tpl->tpl_vars[\''. substr($this->yystack[$this->yyidx + 0]->minor,1) .'\']->value'); }  function yy_r197(){ $this->_retvalue = new _smarty_code($this, '('.$this->yystack[$this->yyidx + -1]->minor.')'); }  function yy_r198(){ $this->_retvalue = new _smarty_tag($this, $this->yystack[$this->yyidx + 0]->minor); }  function yy_r199(){ $this->_retvalue = new _smarty_dq_content($this, $this->yystack[$this->yyidx + 0]->minor); }  private $_retvalue; function yy_reduce($yyruleno) { $yymsp = $this->yystack[$this->yyidx]; if (self::$yyTraceFILE && $yyruleno >= 0 && $yyruleno < count(self::$yyRuleName)) { fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n", self::$yyTracePrompt, $yyruleno, self::$yyRuleName[$yyruleno]); } $this->_retvalue = $yy_lefthand_side = null; if (array_key_exists($yyruleno, self::$yyReduceMap)) {  $this->_retvalue = null; $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}(); $yy_lefthand_side = $this->_retvalue; } $yygoto = self::$yyRuleInfo[$yyruleno]['lhs']; $yysize = self::$yyRuleInfo[$yyruleno]['rhs']; $this->yyidx -= $yysize; for($i = $yysize; $i; $i--) {  array_pop($this->yystack); } $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto); if ($yyact < self::YYNSTATE) { if (!self::$yyTraceFILE && $yysize) { $this->yyidx++; $x = new TP_yyStackEntry; $x->stateno = $yyact; $x->major = $yygoto; $x->minor = $yy_lefthand_side; $this->yystack[$this->yyidx] = $x; } else { $this->yy_shift($yyact, $yygoto, $yy_lefthand_side); } } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) { $this->yy_accept(); } } function yy_parse_failed() { if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt); } while ($this->yyidx >= 0) { $this->yy_pop_parser_stack(); } } function yy_syntax_error($yymajor, $TOKEN) {  $this->internalError = true; $this->yymajor = $yymajor; $this->compiler->trigger_template_error();  } function yy_accept() { if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt); } while ($this->yyidx >= 0) { $stack = $this->yy_pop_parser_stack(); }  $this->successful = !$this->internalError; $this->internalError = false; $this->retvalue = $this->_retvalue;  } function doParse($yymajor, $yytokenvalue) { $yyerrorhit = 0;  if ($this->yyidx === null || $this->yyidx < 0) { $this->yyidx = 0; $this->yyerrcnt = -1; $x = new TP_yyStackEntry; $x->stateno = 0; $x->major = 0; $this->yystack = array(); array_push($this->yystack, $x); } $yyendofinput = ($yymajor==0); if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sInput %s\n", self::$yyTracePrompt, $this->yyTokenName[$yymajor]); } do { $yyact = $this->yy_find_shift_action($yymajor); if ($yymajor < self::YYERRORSYMBOL && !$this->yy_is_expected_token($yymajor)) {  $yyact = self::YY_ERROR_ACTION; } if ($yyact < self::YYNSTATE) { $this->yy_shift($yyact, $yymajor, $yytokenvalue); $this->yyerrcnt--; if ($yyendofinput && $this->yyidx >= 0) { $yymajor = 0; } else { $yymajor = self::YYNOCODE; } } elseif ($yyact < self::YYNSTATE + self::YYNRULE) { $this->yy_reduce($yyact - self::YYNSTATE); } elseif ($yyact == self::YY_ERROR_ACTION) { if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sSyntax Error!\n", self::$yyTracePrompt); } if (self::YYERRORSYMBOL) { if ($this->yyerrcnt < 0) { $this->yy_syntax_error($yymajor, $yytokenvalue); } $yymx = $this->yystack[$this->yyidx]->major; if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ){ if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n", self::$yyTracePrompt, $this->yyTokenName[$yymajor]); } $this->yy_destructor($yymajor, $yytokenvalue); $yymajor = self::YYNOCODE; } else { while ($this->yyidx >= 0 && $yymx != self::YYERRORSYMBOL && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE ){ $this->yy_pop_parser_stack(); } if ($this->yyidx < 0 || $yymajor==0) { $this->yy_destructor($yymajor, $yytokenvalue); $this->yy_parse_failed(); $yymajor = self::YYNOCODE; } elseif ($yymx != self::YYERRORSYMBOL) { $u2 = 0; $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2); } } $this->yyerrcnt = 3; $yyerrorhit = 1; } else { if ($this->yyerrcnt <= 0) { $this->yy_syntax_error($yymajor, $yytokenvalue); } $this->yyerrcnt = 3; $this->yy_destructor($yymajor, $yytokenvalue); if ($yyendofinput) { $this->yy_parse_failed(); } $yymajor = self::YYNOCODE; } } else { $this->yy_accept(); $yymajor = self::YYNOCODE; } } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0); } } ?>